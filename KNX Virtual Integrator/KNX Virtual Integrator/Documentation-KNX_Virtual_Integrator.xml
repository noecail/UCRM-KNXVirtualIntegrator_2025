<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KNX Virtual Integrator</name>
    </assembly>
    <members>
        <member name="T:KNX_Virtual_Integrator.App">
            <summary>
            The class used in Wpf applications to centralize every element, initialize and close the application.
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.App.AppName">
            <summary>
            Represents the name of the application.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.App.AppVersion">
            <summary>
            Represents the version of the application.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.App.AppBuild">
            <summary>
            Represents the build of the application. Updated each time portions of code are merged on github.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.App.WindowManager">
            <summary>
            Manages the application's display elements, including windows, buttons, and other UI components.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.App.MainViewModel">
            <summary>
            Represents the main ViewModel of the application, handling the overall data-binding and command logic
            for the main window and core application functionality.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.App.ModelManager">
            <summary>
            Manages the application's core data models and business logic, providing a central point for 
            interacting with and managing the data and services required by the application.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.App.OnStartup(System.Windows.StartupEventArgs)">
            <summary>
            Entry point of the application that triggers initialization and opening of the main window.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.App.InitializeApplicationComponents">
            <summary>
            Initializes various components and dependencies of the application.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.App.OpenMainWindow">
            <summary>
            Opens and displays the main window of the application.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.App.PerformStartupTasks">
            <summary>
            Executes additional tasks required during the startup process.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.App.OnExit(System.Windows.ExitEventArgs)">
            <summary>
            Handles the cleanup process when the application exits.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem">
            <summary>
            Class used only for Value collections,
            used by the UI to access and modify BigInteger values,
            which do not raise notifications by default.
            It is a sort of wrapper
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem._removeTestButtonVisibility">
            <summary>
            The visibility of the Value box in TestedElement.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem.RemoveTestButtonVisibility">
            <summary>
            Gets or sets the visibility of the Value box in TestedElement.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem._bigIntegervalue">
            <summary>
            The wrapped BigInteger.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem.BigIntegerValue">
            <summary>
            Gets or sets the wrapped BigInteger.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem._isEnabled">
            <summary>
            Boolean determining whether the box is enabled or not.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem.IsEnabled">
            <summary>
            Gets or sets the boolean determining whether the box is enabled or not.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem.#ctor(System.Numerics.BigInteger)">
            <summary>
            Initializes the wrapper with a Collapsed visibility and unless the parameter is equal to -1,
            the box is enabled.
            </summary>
            <param name="bi">The <see cref="T:System.Numerics.BigInteger"/> to be wrapped</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem.#ctor(KNX_Virtual_Integrator.Model.Entities.BigIntegerItem)">
            <summary>
            Constructor. Duplicator.
            </summary>
            <param name="other"></param>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem.PropertyChanged">
            <summary>
            The event that occurs when the BigIntegerItem changes. 
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem.OnPropertyChanged(System.String)">
            <summary>
            Invokes the event <see cref="E:KNX_Virtual_Integrator.Model.Entities.BigIntegerItem.PropertyChanged"/> when the BigIntegerItem changes.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Entities.DataPointType">
            <summary>
            Represents a DataPointType with : its type code, size, address and values expected to be sent or read
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.DataPointType._name">
            <summary>
            The name of the DataPoint.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.DataPointType.Name">
            <summary>
            Gets or sets the name of the DataPoint.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.DataPointType.Value">
            <summary>
            List of GroupValues to send/read.
            GroupValues is the type understood by KNX.
            GroupValues cannot be accessed/modified on the UI because they are not a common type.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.DataPointType.IntValue">
            <summary>
            Gets or sets the collection parallel to <see cref="P:KNX_Virtual_Integrator.Model.Entities.DataPointType.Value"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.DataPointType._type">
            <summary>
            The type of the Data Point (1, 2, ...).
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.DataPointType.Type">
            <summary>
            Gets or sets the type of the Data point.
            The setter updates the size. <seealso cref="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.GetSizeOf"/>
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.DataPointType._size">
            <summary>
            The size of the DataPoint (1 bit, 2 bits, 1 byte,..). <seealso cref="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.GetSizeOf"/>
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.DataPointType._address">
            <summary>
            The Group Address associated with the DataPointType (ex : 0/1/1).
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.DataPointType.Address">
            <summary>
            Gets or sets the Group Address of the DataPointType.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.#ctor">
            <summary>
            Constructor for DataPointType
            No parameters
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.#ctor(System.Int32)">
            <summary>
            Constructor for DataPointType
            </summary>
            <param name="type">The type of DPT (1,2,...)</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.#ctor(System.Int32,System.String)">
            <summary>
            Constructor for DataPointType
            </summary>
            <param name="type">The type of DPT (1,2,...)</param>
            <param name="name">The name of the DPT</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.#ctor(System.Int32,System.String,System.Collections.Generic.List{Knx.Falcon.GroupValue})">
            <summary>
            Constructor for DataPointType 
            </summary>
            <param name="type">The type of DPT (1,2,...)</param>
            <param name="address">The address to which the DPT wil be bound</param>
            <param name="values">The values this DPT will send/receive</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.#ctor(System.Int32,System.String,System.Collections.Generic.List{Knx.Falcon.GroupValue},System.String)">
            <summary>
            Constructor for DataPointType
            </summary>
            <param name="type">The type of DPT (1,2,...)</param>
            <param name="address">The address to which the DPT wil be bound</param>
            <param name="values">The values this DPT will send/receive</param>
            <param name="name">The name of the DPT</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.#ctor(KNX_Virtual_Integrator.Model.Entities.DataPointType)">
            <summary>
            Constructor for DataPointType : Duplicator
            </summary>
            <param name="other">The DPT to copy</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.#ctor(KNX_Virtual_Integrator.Model.Entities.DataPointType,System.String)">
            <summary>
            Constructor for DataPointType : Duplicator
            </summary>
            <param name="dpt">The DPT to copy</param>
            <param name="address">The new address </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.GetSizeOf">
            <summary>
            This method computes the size of a DPT from its code. Only the most used types are implemented(under 222). Check
            https://support.knx.org/hc/fr/article_attachments/15392631105682 to add here the new formats if not yet implemented.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.CompareValuesLength(KNX_Virtual_Integrator.Model.Entities.DataPointType)">
            <summary>
            This method compares the number of addresses of 2 DPT.
            </summary>
            <returns>Returns true when both DPTs have the same number of addresses.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.IsEqual(KNX_Virtual_Integrator.Model.Entities.DataPointType)">
            <summary>
            This method checks if two DPTs have the same format.
            </summary>
            <param name="dpt">The DPT that we want to compare with. </param>
            <returns>Returns a boolean corresponding to if the DPTs are of the same type.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.IsPossible">
            <summary>
            This method checks whether the selected values to send and to read can fit in the selected size.
            </summary>
            <returns>Returns a boolean acknowledging whether the test is possible or not</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.AddValue(Knx.Falcon.GroupValue)">
            <summary>
            This method adds a value to a DPT.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.RemoveValue(System.Int32)">
            <summary>
            This method deletes an address to a DPT.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.UpdateIntValue">
            <summary>
            Updates the BigIntegerItem array by copying the Value array and turning it into big integer values
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.UpdateValue">
            <summary>
            Updates the GroupValue array by copying the intValue array and turning it into group values
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.UpdateRemoveTestButtonVisibility(System.Windows.Visibility)">
            <summary>
            Update the visibility of the button that deletes a test line, ie all dispatch/receive values on a line
            Should be called anytime the number of DPTs in the element changes
            </summary>
            <param name="vis"></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.CompareGroupValue(Knx.Falcon.GroupValue,System.Int32)">
            <summary>
            This method checks if the group value of the DPT is the same as the one in parameter.
            </summary>
            <returns>Returns true when the read(in parameter) and expected values are the same</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.ExtractDptFromXElement(System.Xml.Linq.XElement)">
            <summary>
            Extracts the data from a XElement to put it into the DPT
            </summary>
            <param name="element">The XElement representing the address group we want to link the DPT with.</param>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Entities.DataPointType.PropertyChanged">
            <summary>
            Event that occurs when the DataPointType changes.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.OnPropertyChanged(System.String)">
            <summary>
            Invokes <see cref="E:KNX_Virtual_Integrator.Model.Entities.DataPointType.PropertyChanged"/> when called.
            </summary>
            <param name="propertyName">The name of the property that was changed.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.ToString">
            <summary>
            Override to only return the name of the DataPointType.
            </summary>
            <returns><see cref="P:KNX_Virtual_Integrator.Model.Entities.DataPointType.Name"/></returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords">
            <summary>
            The class holding defining a DPT and the keywords associated with it.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.Key">
            <summary>
            Key/Number of the instance.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords._keywords">
            <summary>
            List of keywords associated with the <see cref="P:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.Dpt"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.Keywords">
            <summary>
            Gets or sets the list of keywords associated with the <see cref="P:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.Dpt"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords._allKeywords">
            <summary>
            String of all the keywords associated with the <see cref="P:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.Dpt"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.AllKeywords">
            <summary>
            Gets or sets the string of all the keywords associated with the <see cref="P:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.Dpt"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.Dpt">
            <summary>
            The DPT associated with the <see cref="P:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.Keywords"/>.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.UpdateKeywords">
            <summary>
            Takes a string, and puts all the keywords inside it into the keywords associated
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.UpdateKeywordList">
            <summary>
            Takes all the keywords associated to a dpt and group them, separating them with commas
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.#ctor">
            <summary>
            Empty constructor since everything is already initialized.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.#ctor(KNX_Virtual_Integrator.Model.Entities.DptAndKeywords)">
            <summary>
            Copies a DptAndKeywords.
            </summary>
            <param name="other">The DptAndKeywords to copy</param>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.PropertyChanged">
            <summary>
            Event that occurs when the DptAndKeywords changes.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.OnPropertyChanged(System.String)">
            <summary>
            Invokes <see cref="E:KNX_Virtual_Integrator.Model.Entities.DptAndKeywords.PropertyChanged"/> when called.
            </summary>
            <param name="propertyName">The name of the property that was changed.</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Entities.ElementStructure">
            <summary>
            Barebone structure of TestedElements. It holds the number of CMD, IE and the DPT associated with it.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.ElementStructure.Cmd">
            <summary>
            The keys of the Cmd DPTs in the Element.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.ElementStructure.Ie">
            <summary>
            The keys of the Ie DPTs in the Element.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.ElementStructure.CmdValues">
            <summary>
            All the values predefined in the structure, to be sent
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.ElementStructure.IeValues">
            <summary>
            All the values predefined in the structure, to be read
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.AddToCmd(System.Int32)">
            <summary>
            Adds a new Cmd Dpt.
            </summary>
            <param name="value">The key of the DPT at which the Cmd is initialized.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.AddToIe(System.Int32)">
            <summary>
            Adds a new Ie Dpt.
            </summary>
            <param name="value">The key of the DPT at which the Cmd is initialized.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.RemoveCmdAt(System.Int32)">
            <summary>
            Removes a Cmd Dpt at an index.
            </summary>
            <param name="cmdIndex">The index of the DPT to remove.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.RemoveIeAt(System.Int32)">
            <summary>
            Removes an Ie Dpt at an index.
            </summary>
            <param name="ieIndex">The index of the DPT to remove.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.AddTest">
            <summary>
            Adds a line of values to an element structure, both to be sent and to be read
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.RemoveTestAt(System.Int32)">
            <summary>
            Removes a line of values from an element structure, both to be sent and to be read
            One parameter : the index of the test line
            </summary>
            <param name="indexTest"></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.#ctor">
            <summary>
            Constructor
            Creates an empty ElementStructure.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.#ctor(System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.IntItem},System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.IntItem})">
            <summary>
            Constructor
            Creates a filled ElementStructure with <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="cmdCollection">The collection of Cmd DPT to copy.</param>
            <param name="ieCollection">The collection of Ie DPT to copy.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.#ctor(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Creates a filled ElementStructure with lists.
            </summary>
            <param name="cmdCollection">The list of Cmd DPT to copy.</param>
            <param name="ieCollection">The list of Ie DPT to copy.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.#ctor(KNX_Virtual_Integrator.Model.Entities.ElementStructure)">
            <summary>
            Copies an ElementStructure.
            </summary>
            <param name="otherStructure">The structure to copy.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ElementStructure.UpdateRemoveDptButtonVisibility">
            <summary>
            Hides the Cmd remove button if there is only one Cmd DPT.
            Shows the button if there is more.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Entities.FunctionalModel">
             <summary>
             Represents a functional model with a unique key, name, and DPT (Data Point Type) value.
            
             This class provides properties for storing and retrieving the key and name of the model.
             It includes functionality for displaying the model in a formatted string and implements 
             equality comparison based on the DPT value, name, and key. The class is designed to be 
             comparable with other instances of the same type to determine equality.
            
             - Key: Unique identifier for the functional model.
             - Name: Descriptive name of the functional model.
             
             The class overrides the ToString, Equals, and GetHashCode methods to provide custom
             string representation, equality checks, and hash code generation.
             </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.ElementList">
            <summary>
            The list of Elements associated with the model.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.FunctionalModel._key">
            <summary>
            Unique identifier of model, i.e. used on interface "M{key}".
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Key">
            <summary>
            Gets or sets the unique identifier of model, i.e. used on interface "M{Key}".
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.FunctionalModel._name">
            <summary>
            The name of the model.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Name">
            <summary>
            Gets or sets the name of the model.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.FullName">
            <summary>
            Gives the same output as ToString method. But ToString does not dynamically change when the name is modified
            FullName is used to display the Key and the Name in the SelectedModels listbox in the Main window
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.#ctor(System.String)">
            <summary>
            Create a Functional Model with only a name
            </summary>
            <param name="name">The name of the model</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.#ctor(System.Collections.Generic.List{KNX_Virtual_Integrator.Model.Entities.TestedElement},System.String)">
            <summary>
            Create a Functional Model with both an Element list and a name
            </summary>
            <param name="list">The list of elements</param>
            <param name="name">The name of the model</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.#ctor(KNX_Virtual_Integrator.Model.Entities.FunctionalModel,System.Int32,System.Boolean)">
            <summary>
            Copies a model while giving a new key and indicates if it's a copy of a displayed model
            </summary>
            <param name="functionalModel">the copied model</param>
            <param name="key">the key of the copy</param>
            <param name="copy">Indicates if the copy is a copy of a displayed model</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.#ctor(System.String,System.Int32)">
            <summary>
            Creates a model with only the name and a key
            </summary>
            <param name="name">The name of the model</param>
            <param name="key">The key of the model</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Rename(System.String)">
            <summary>
            Renames the <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Name"/>.
            </summary>
            <param name="newName">The new Name.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.AddElement(KNX_Virtual_Integrator.Model.Entities.TestedElement)">
            <summary>
            Adds an element to the list of elements of the functional model
            </summary>
            <param name="dpt">The new Element to add</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.AddElement">
            <summary>
            Adds an element to the list of elements of the functional model
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.RemoveLastElement">
            <summary>
            Removes the last Element added to the functional model
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.RemoveElement(System.Int32)">
            <summary>
            Removes the Element of the specified index from the functional model
            </summary>
            <param name="index">The index of the Element to be deleted</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.ToString">
            <summary>
            Used everytime a model is displayed. 
            </summary>
            <returns>A combination of the <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Key"/> and the <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Name"/>.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Equals(System.Object)">
            <summary>
            Calls <see cref="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Equals(KNX_Virtual_Integrator.Model.Entities.FunctionalModel)"/> if the parameter is a FunctionalModel.
            </summary>
            <param name="obj">The object to be compared.</param>
            <returns>Returns <see cref="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Equals(KNX_Virtual_Integrator.Model.Entities.FunctionalModel)"/> or false if not a FunctionalModel.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Equals(KNX_Virtual_Integrator.Model.Entities.FunctionalModel)">
            <summary>
            Compares the equality of multiple attributes of the model and the parameter.
            </summary>
            <param name="other">The functional model to be compared with.</param>
            <returns>True if the <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Key"/>, <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Name"/> and all elements in <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.ElementList"/> are equal.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.GetHashCode">
            <summary>
            Gives the hashcode of the <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Key"/>.
            </summary>
            <returns>The hashcode of the <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Key"/>.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.IsPossible">
            <summary>
            Checks if all the elements have the same number of values and if the values can be sent/received.
            </summary>
            <returns>True if all elements are "possible". <seealso cref="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.IsPossible"/></returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.ExportFunctionalModel(System.Xml.XmlDocument)">
            <summary>
            Exports the functional model to an XmlDocument.
            </summary>
            <param name="doc">The XmlDocument to which the model should be exported.</param>
            <returns>The XmlElement of the model created in the document.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.ImportFunctionalModel(System.Xml.XmlNode)">
            <summary>
            Imports the functional model from a XmlNode.
            </summary>
            <param name="model">The XmlNode containing the model.</param>
            <returns>The imported FunctionalModel.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.BuildCmdIntValues(KNX_Virtual_Integrator.Model.Entities.FunctionalModel)">
            <summary>
            Takes a model and fills its commands' int values with the ones of the model in parameters
            </summary>
            <param name="model"> Model to copy the int values from.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.HasSameStructure(KNX_Virtual_Integrator.Model.Entities.FunctionalModel)">
            <summary>
            Checks whether the two models have the same structure.
            </summary>
            <param name="functionalModel">The model to be compared with</param>
            <returns>true if they have the same structure; otherwise false.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.Contains(KNX_Virtual_Integrator.Model.Entities.TestedElement,System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Checks whether the model has a <see cref="T:KNX_Virtual_Integrator.Model.Entities.TestedElement"/>. While ignoring some indexes.
            </summary>
            <param name="element">The TestedElement to be checked for.</param>
            <param name="bannedIndexes">The indexes in the element list to ignore.</param>
            <returns>the index of the TestedElement in the <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.ElementList"/>.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.UpdateValue">
            <summary>
            Updates the GroupValue arrays of all Elements. <seealso cref="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.UpdateValue"/>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.UpdateIntValue">
            <summary>
            Updates the BigInteger arrays of all Elements. <seealso cref="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.UpdateIntValue"/>
            </summary>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.PropertyChanged">
            <summary>
            The event that occurs when an attribute of the functional model changes.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.OnPropertyChanged(System.String)">
            <summary>
            Called when there is a change in an attribute and invokes <see cref="E:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.PropertyChanged"/>.
            </summary>
            <param name="propertyName">The name of the property/attribute that changed.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.DisplayIntValues">
            <summary>
            Dev method : used to display all the intValues of the model.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.DisplayModel">
            <summary>
            Dev method : used to display all the Values of the model.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.FindKey(KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure,KNX_Virtual_Integrator.Model.Entities.DataPointType)">
            <summary>
            Finds in a structure the key of an unrecognized datapoint.
            </summary>
            <param name="modelStructure"> The structure where the dpt is.</param>
            <param name="dpt">The dpt to place in a functional model.</param>
            <returns> The key of the dpt in the structure. </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.BuildFromStructure(KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure,KNX_Virtual_Integrator.Model.Entities.DataPointType,System.Int32)">
            <summary>
            Build the <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.ElementList"/> of the model according to the structure of the model
            </summary>
            <param name="modelStructure">The structure of the model to be loaded to the element list.</param>
            <param name="dpt">The standard DPT of the element list.</param>
            <param name="key">The key of the model.</param>
            <seealso cref="T:KNX_Virtual_Integrator.Model.Entities.DataPointType"/>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure">
            <summary>
            Class holding the structure of functional models in a Structure.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.Model">
            <summary>
            The model to be used as a Structure example.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.DptDictionary">
            <summary>
            Dictionary of DPTs and their keywords of the structure.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.DptKeys">
            <summary>
            List of DPT keys used when choosing which DPT to use in the TestedElement. 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.DefaultDptToChoose">
            <summary>
            List of all implemented DPTs from which to choose.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.FullName">
            <summary>
            Gives the same output as ToString method. But ToString does not dynamically change when the name is modified
            FullName is used to display the Key and the Name in the SelectedModels listbox in the Main window
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.ModelStructure">
            <summary>
            The list of ElementStructures of the model
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.IsValid">
            <summary>
            Checks whether the structure is correctly filled (every necessary option is filled)
            </summary>
            <returns>true if it is correctly filled.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.#ctor(System.String)">
            <summary>
            Constructor with only the name of the structure and no DPT, keyword or ElementStructure.
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure._keywords">
            <summary>
            Keywords of the structure (with the whole structure).
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.Keywords">
            <summary>
            Gets or sets keywords of the structure (with the whole structure).
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure._allKeywords">
            <summary>
            The string of all keywords of the structure (of the whole structure).
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.AllKeywords">
            <summary>
            Gets or sets the string of all keywords of the structure (of the whole structure).
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.UpdateKeywords">
            <summary>
            Takes a string, and puts all the keywords inside it into the keywords associated
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.UpdateKeywordList">
            <summary>
            Takes all the keywords associated to a dpt and group them, separating them with commas
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.#ctor(KNX_Virtual_Integrator.Model.Entities.FunctionalModel,System.Int32)">
            <summary>
            Creates a ModelStructure.
            </summary>
            <param name="model">The structure.</param>
            <param name="myKey">The future key.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.#ctor(KNX_Virtual_Integrator.Model.Entities.FunctionalModel,System.String,System.Int32)">
            <summary>
            Creates a ModelStructure.
            </summary>
            <param name="myName">The future name.</param>
            <param name="model">The structure.</param>
            <param name="myKey">The future key.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.#ctor(System.String,System.Collections.Generic.Dictionary{System.Int32,KNX_Virtual_Integrator.Model.Entities.DptAndKeywords},System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.ElementStructure},System.Int32)">
            <summary>
            Creates a ModelStructure with most of its attributes/properties but only with default CMD/IE. 
            </summary>
            <param name="name">The future name.</param>
            <param name="functionalModels">The future dictionary.</param>
            <param name="modelStructure">The structure of elements.</param>
            <param name="key">The future key.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.#ctor(System.String,System.Collections.Generic.Dictionary{System.Int32,KNX_Virtual_Integrator.Model.Entities.DptAndKeywords},System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.ElementStructure},System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}}},System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}}},System.Int32)">
            <summary>
            Creates a ModelStructure with most of its attributes/properties. 
            </summary>
            <param name="name">The future name.</param>
            <param name="functionalModels">The future dictionary.</param>
            <param name="modelStructure">The structure.</param>
            <param name="cmdValues">The Command DPTs to insert.</param>
            <param name="ieValues">The Ie DPTs to insert.</param>
            <param name="key">The future key.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.#ctor(KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure)">
            <summary>
            Copy of a modelStructure, independent of the one given in parameters.
            </summary>
            <param name="modelStructure">The structure from which the key, dptDictionary and keywords are taken.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.#ctor(KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}}},System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}}})">
            <summary>
            Copies a ModelStructure with most of its attributes. 
            </summary>
            <param name="modelStructure">The structure from which the key, dptDictionary and keywords are taken.</param>
            <param name="cmdValues">The Command DPTs to insert.</param>
            <param name="ieValues">The Ie DPTs to insert.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.RetrieveFunctionalModel(System.Collections.Generic.List{KNX_Virtual_Integrator.Model.Entities.DataPointType})">
            <summary>
            Creates a functional model from the list of all the DPTs of a model and its structure
            </summary>
            <param name="dataPoints"> List of DPTs</param>
            <returns>The functional model filled with the DPTs according to the structure</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.GetKey(KNX_Virtual_Integrator.Model.Entities.DataPointType)">
            <summary>
            Finds the key of the DPT in the dictionary corresponding to the argument
            </summary>
            <param name="dataPoint">DPT to find in the dictionary</param>
            <returns> The key of the corresponding DPT in the dictionary</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.AddElement">
            <summary>
            Adds an ElementStructure to the ModelStructure.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.BuildFunctionalModel(System.String,System.Int32)">
            <summary>
            Returns a model built from the model structure.
            </summary>
            <param name="name">the name of the model to build.</param>
            <param name="key">The key of the model to build.</param>
            <returns>The built model.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.ImportFunctionalModelStructure(System.Xml.XmlNode,System.Int32)">
            <summary>
            Imports a ModelStructure from an XmlNode.
            </summary>
            <param name="model">The XmlNode from which the ModelStructure is imported.</param>
            <param name="key">The key of the model to build.</param>
            <returns>The new ModelStructure.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.ExportFunctionalModelStructure(System.Xml.XmlDocument)">
            <summary>
            Exports a ModelStructure by creating an XmlElement from an XmlDocument.
            </summary>
            <param name="doc">The XmlDocument in which the XmlElement is created.</param>
            <returns>The new XmlElement.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.ToString">
            <summary>
            Override to only display the <see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.FullName"/> of the modelStructure.
            </summary>
            <returns><see cref="P:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.FullName"/>.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.CreateDpt">
            <summary>
            Creates a Dpt at the last position in the dictionary.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.RemoveDpt(System.Int32)">
            <summary>
            Removes a Dpt from the dictionary.
            </summary>
            <param name="key">The key of the dpt to remove</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.FindKeyWithKeywords(System.String)">
            <summary>
            Finds the key of a dpt in a functional model structure from its name.
            </summary>
            <param name="name"> The name of the dpt. </param>
            <returns>The key of the dpt in the structure. </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.SetUpNotifs">
            <summary>
            Sets up updates for the DPT. <seealso cref="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.SetUpDptKeysUpdate"/><seealso cref="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.SetUpFullNameUpdate"/>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.SetUpFullNameUpdate">
            <summary>
            Sets up the Dpt FullName's update
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.SetUpDptKeysUpdate">
            <summary>
            Sets up the Dpt Key's update.
            </summary>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.PropertyChanged">
            <summary>
            Event that occurs when the IntItem changes.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.OnPropertyChanged(System.String)">
            <summary>
            Invokes <see cref="E:KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure.PropertyChanged"/> when called.
            </summary>
            <param name="propertyName">The name of the property that was changed.</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Entities.IntItem">
            <summary>
            Int wrapper
            Used to have a setter
            <see cref="E:KNX_Virtual_Integrator.Model.Entities.IntItem.PropertyChanged"/> and interface visibility handling.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.IntItem._value">
            <summary>
            Value of the DPT
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.IntItem.Value">
            <summary>
            Gets or sets the value of the DPT
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.IntItem._removeDptButtonVisibility">
            <summary>
            Visibility of the button used to remove a DPT in <see cref="T:KNX_Virtual_Integrator.View.Windows.StructureEditWindow"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.IntItem.RemoveDptButtonVisibility">
            <summary>
            Gets or sets the visibility of the button used to
            remove a DPT in <see cref="T:KNX_Virtual_Integrator.View.Windows.StructureEditWindow"/>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.IntItem.op_Implicit(KNX_Virtual_Integrator.Model.Entities.IntItem)~System.Int32">
            <summary>
            Used to "quicken" search of the value since using the item will output directly its value.
            </summary>
            <param name="item">The item whose value will be returned.</param>
            <returns>The value of the item.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.IntItem.ToString">
            <summary>
            To print only the <see cref="P:KNX_Virtual_Integrator.Model.Entities.IntItem.Value"/> of the item.
            </summary>
            <returns>The value as a string</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.IntItem.#ctor(System.Int32)">
            <summary>
            Constructs the class with hidden visibility. 
            </summary>
            <param name="value">the value to which <see cref="P:KNX_Virtual_Integrator.Model.Entities.IntItem.Value"/> will be initialised.</param>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Entities.IntItem.PropertyChanged">
            <summary>
            Event that occurs when the IntItem changes.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.IntItem.OnPropertyChanged(System.String)">
            <summary>
            Invokes <see cref="E:KNX_Virtual_Integrator.Model.Entities.IntItem.PropertyChanged"/> when called.
            </summary>
            <param name="name">The name of the property that was changed.</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2">
            <summary>
            Class wrapper for IDictionary to handle more notifications when properties change.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of values in the dictionary</typeparam>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2._dictionary">
            <summary>
            The instance of the dictionary.
            </summary>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.CollectionChanged">
            <summary>
            Invoked when a collection has changed.
            </summary>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.PropertyChanged">
            <summary>
            Invoked when a property has changed.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.#ctor">
            <summary>Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2"/> class. </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2"/> class. </summary>
            <param name="dictionary">The dictionary to initialize this dictionary. </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer. </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.OnPropertyChanged(System.String)">
            <summary>
            Called when the collection has changed.
            </summary>
            <param name="propertyName">The name of the changed property/attribute.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the collection has changed.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.NotifyAdd(`0,`1)">
            <summary>
            invokes the change of Count, Item[] and a Add with the key and value
            </summary>
            <param name="key">The key of the added item</param>
            <param name="value">The value of the added item</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.NotifyRemove(`0,`1,System.Int32)">
            <summary>
            Invokes the change of Count, Item[] and a Remove with the key,index and value
            </summary>
            <param name="key">The key of the removed item</param>
            <param name="value">The value of the removed item</param>
            <param name="index">the index of the removed item</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.NotifyReset">
            <summary>
            Invokes the change of Count, Item[] and a Reset
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the Dictionary.</exception>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the Dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if key is not found in the Dictionary.</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Clear">
            <summary>
            Removes all keys and values from the Dictionary.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the Dictionary contains the specified key.
            </summary>
            <param name="key">The key to locate in the Dictionary.</param>
            <returns>true if the Dictionary contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the Dictionary contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Item(`0)">
            <summary>
            Gets/sets the value in the dictionary associated with the specified key.
            </summary>
            <param name="key"></param>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Keys">
            <summary>
            Gets an ICollection containing the keys of the dictionary.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Values">
            <summary>
            Gets an ICollection containing the values of the dictionary.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the dictionary.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the dictionary is read-only and returns false.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the Dictionary.
            </summary>
            <returns>An Enumerator structure for the Dictionary</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a KeyValuePair with the parameter Key and Value
            </summary>
            <param name="item">The KeyValuePair to copy.</param>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
            <exception cref="T:System.ArgumentException"> An element with the same key already exists in the IDictionary</exception>
            <exception cref="T:System.NotSupportedException">The IDictionary is read-only</exception>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether a sequence contains a specified element by using the default equality comparer.
            </summary>
            <param name="item">the KeyValuePair to compare with.</param>
            <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">The source is null</exception>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex"> The zero-based index in array at which copying begins</param>
            <exception cref="T:System.ArgumentNullException">The source is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source ICollection is greater than the available space from arrayIndex to the end of the destination array</exception>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            <see cref="M:KNX_Virtual_Integrator.Model.Entities.ObservableDictionary`2.Remove(`0)"/>
            </summary>
            <param name="item">the item to remove</param>
            <returns>true if the removal was successful.</returns>
            <exception cref="T:System.ArgumentNullException">key is null</exception>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Entities.TestedElement">
            <summary>
            Represents an element to test.
            They are composed of DataPointTypes.
            The first DataPointType of each array is the command and the next ones are the Feedbacks.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.TestedElement.TestsCmd">
            <summary>
            The list of commands to send to the bus
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Entities.TestedElement.TestsIe">
            <summary>
            The list of expected feedback to be read on the bus
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Entities.TestedElement.Name">
            <summary>
            Name of the Element (not used)
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.#ctor">
            <summary>
            Barebone constructor
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.#ctor(System.Int32[],System.String[],System.Collections.Generic.List{Knx.Falcon.GroupValue}[],System.Int32[],System.String[],System.Collections.Generic.List{Knx.Falcon.GroupValue}[])">
            <summary>
            Full constructor of the Element
            </summary>
            <param name="typeCmd">the types of CMD DPTs</param>
            <param name="addressCmd">the addresses bound to CMD DPTs</param>
            <param name="valueCmd">the values of the CMD DPTs</param>
            <param name="typeIe">the types of IE DPTs</param>
            <param name="addressesIe">the addresses bound to IE DPTs</param>
            <param name="valueIe">the values of the IE DPTs</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.#ctor(System.Int32[],System.String[],System.Collections.Generic.List{Knx.Falcon.GroupValue}[])">
            <summary>
            Command-only constructor
            </summary>
            <param name="typeCmd">the types of CMD DPTs</param>
            <param name="addressCmd">the addresses bound to CMD DPTs</param>
            <param name="valueCmd">the values of the CMD DPTs</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.#ctor(System.Int32[],System.String[],System.Collections.Generic.List{Knx.Falcon.GroupValue}[],System.String[],System.String)">
            <summary>
            Command-only constructor with names included
            </summary>
            <param name="typeCmd">the types of CMD DPTs</param>
            <param name="addressCmd">the addresses bound to CMD DPTs</param>
            <param name="valueCmd">the values of the CMD DPTs</param>
            <param name="dptNames">name of the DPTs</param>
            <param name="circuitName">Name of the element</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.#ctor(KNX_Virtual_Integrator.Model.Entities.TestedElement)">
            <summary>
            Copy constructor
            </summary>
            <param name="other">The copied Element</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.IsPossible">
            <summary>
            This method checks if all the selected values to send and to read can fit in the selected sizes
            and if all the DPTs have the same number of values
            <returns>Returns a boolean acknowledging whether the test is possible or not</returns>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.IsEqual(KNX_Virtual_Integrator.Model.Entities.TestedElement)">
            <summary>
            This method checks if two elements have the same number of DPTs and if they are of the same type.
            <returns>Returns a boolean acknowledging whether the Elements are equal or not</returns>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.Contains(KNX_Virtual_Integrator.Model.Entities.DataPointType,System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Checks whether the TestsCmd contains the DPT
            </summary>
            <param name="other">The DPT to look out for</param>
            <param name="bannedIndexes">The indexes where searching is not allowed.</param>
            <returns>the index if it is found; -1 otherwise.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.AddTest">
            <summary>
            This method adds a test pair (value to send, value(s) to read) to the list of tests
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.FindELementInModel(KNX_Virtual_Integrator.Model.Entities.FunctionalModel)">
            <summary>
            Checks whether there is a similar Element in the checked model
            </summary>
            <param name="model">The model to check</param>
            <returns>The index of the element; -1 otherwise.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.CopyTest(KNX_Virtual_Integrator.Model.Entities.TestedElement,System.Int32)">
            <summary>
            This method adds a test pair (value to send, value(s) to read) to the list of tests
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.RemoveTest(System.Int32)">
            <summary>
            This method removes a test pair (value to send, value to read) from the list of tests
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.CmdContains(System.String)">
            <summary>
            Counts the number of DPTs in the commands that have a certain name.
            </summary>
            <param name="name">The name to look out for.</param>
            <returns>The number of DPTs with that name</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.IeContains(System.String)">
            <summary>
            Searches for a dpt of the same type of the argument, in the list of dptIe
            </summary>
            <param name="prefix"> prefix
            to find in the list</param>
            <returns>THe index of the dpt in the list of dptIe</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.AddDptToCmd(System.Int32,System.String,System.Collections.Generic.List{Knx.Falcon.GroupValue})">
            <summary>
            Adds a DPT to <see cref="P:KNX_Virtual_Integrator.Model.Entities.TestedElement.TestsCmd"/>
            </summary>
            <param name="type">type of the new dpt</param>
            <param name="address">address bound to the DPT</param>
            <param name="value">all the values of the DPT</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.AddDptToCmd(System.Int32,System.String,System.String,System.Collections.Generic.List{Knx.Falcon.GroupValue})">
            <summary>
            Adds a DPT to <see cref="P:KNX_Virtual_Integrator.Model.Entities.TestedElement.TestsCmd"/>
            </summary>
            <param name="type">type of the DPT</param>
            <param name="name">name of the DPT</param>
            <param name="address">address bound to the DPT</param>
            <param name="value">all the values of the DPT</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.AddDptToCmd(KNX_Virtual_Integrator.Model.Entities.DataPointType)">
            <summary>
            Adds a DPT to <see cref="P:KNX_Virtual_Integrator.Model.Entities.TestedElement.TestsIe"/>
            </summary>
            <param name="dpt">the dpt to add</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.AddDptToIe(System.Int32,System.String,System.Collections.Generic.List{Knx.Falcon.GroupValue})">
            <summary>
            Adds a DPT to <see cref="P:KNX_Virtual_Integrator.Model.Entities.TestedElement.TestsIe"/>
            </summary>
            <param name="type">type of the new dpt</param>
            <param name="address">address bound to the DPT</param>
            <param name="value">all the values of the DPT</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.AddDptToIe(KNX_Virtual_Integrator.Model.Entities.DataPointType)">
            <summary>
            Adds a new DPT to <see cref="P:KNX_Virtual_Integrator.Model.Entities.TestedElement.TestsIe"/> of the element.
            </summary>
            <param name="dpt">The DPT to copy from</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.UpdateIntValue">
            <summary>
            Updates the BigInteger array of all the DPTs. <seealso cref="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.UpdateIntValue"/>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.UpdateValue">
            <summary>
            Updates the GroupValue array of all DPTs. <seealso cref="M:KNX_Virtual_Integrator.Model.Entities.DataPointType.UpdateValue"/>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.UpdateRemoveTestButtonVisibility">
            <summary>
            Updates the visibility of all the <see cref="P:KNX_Virtual_Integrator.Model.Entities.TestedElement.TestsIe"/> Remove Button : the last one doesn't have it.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Entities.TestedElement.GetDptType(System.String)">
            <summary>
            Searches for the type of the dpt with the given name.
            </summary>
            <param name="dptName">The name of said DPT</param>
            <returns>the type of the DPT</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.Analyze">
            <summary>
            Class used to analyze the knx installation according to a list of functional models.
            The models each have a list of Element, which have a list of commands and expected results.
            The results are thus listed as a list of (models)lists of (elements)lists of (commands)lists of (expected results)<see cref="T:KNX_Virtual_Integrator.Model.Implementations.ResultType"/>.
            </summary>
            <param name="communication">The class handling the messages to send and the reception</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Analyze.#ctor(KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication)">
            <summary>
            Class used to analyze the knx installation according to a list of functional models.
            The models each have a list of Element, which have a list of commands and expected results.
            The results are thus listed as a list of (models)lists of (elements)lists of (commands)lists of (expected results)<see cref="T:KNX_Virtual_Integrator.Model.Implementations.ResultType"/>.
            </summary>
            <param name="communication">The class handling the messages to send and the reception</param>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.Analyze.FunctionalModels">
            <summary>
            The list of models to test
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.Analyze.Results">
            <summary>
            Table of results sorted by Tests, in TestedElements, in functionalModels
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.Analyze.Communication">
            <summary>
            The class handling the messages to send and the reception
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.Analyze._timeout">
            <summary>
            Default at 2000 ms and set when calling <see cref="M:KNX_Virtual_Integrator.Model.Implementations.Analyze.TestAll(System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Int32,System.Int32)"/>.
            Used to set an all around timeout for commands.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.Analyze._latency">
            <summary>
            Default at 0 ms and set when calling <see cref="M:KNX_Virtual_Integrator.Model.Implementations.Analyze.TestAll(System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Int32,System.Int32)"/>.
            Used to space out tests, to not saturate the installation.
            </summary>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Implementations.Analyze.PropertyChanged">
            <summary>
            Event that occurs when the model analysis state changes (Between waiting, running, finished and none).
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Analyze.OnPropertyChanged(System.String)">
            <summary>
            Invokes <see cref="E:KNX_Virtual_Integrator.Model.Implementations.Analyze.PropertyChanged"/> when called.
            </summary>
            <param name="propertyName">The name of the property that was changed.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Analyze.TestAll(System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Int32,System.Int32)">
            <summary>
            Tests all the functional models of a list and updates the table of results
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Analyze.TestModel(KNX_Virtual_Integrator.Model.Entities.FunctionalModel)">
            <summary>
            Tests all the TestedElement from a given FunctionalModel
            </summary>
            <param name="functionalModel">FunctionalModel to test</param>
            <returns></returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Analyze.TestElement(KNX_Virtual_Integrator.Model.Entities.TestedElement)">
            <summary>
            Realizes all the tests of a TestedElement
            </summary>
            <param name="element">Element to be tested</param>
            <returns></returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Analyze.CheckResult(System.Collections.Generic.List{KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupMessage}@,KNX_Virtual_Integrator.Model.Entities.DataPointType,System.Int32)">
            <summary>
            Checks if the value of an index of a DataPointType is in a list of GroupMessage
            </summary>
            <param name="readValues">List of values read on the bus</param>
            <param name="expectedResult">DataPointType where the value has to be found</param>
            <param name="index">Index of the test</param>
            <returns></returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.ResultType">
            <summary>
            The 3 possible types of results : <see cref="F:KNX_Virtual_Integrator.Model.Implementations.ResultType.Success"/>, <see cref="F:KNX_Virtual_Integrator.Model.Implementations.ResultType.Response"/> and <see cref="F:KNX_Virtual_Integrator.Model.Implementations.ResultType.Failure"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.ResultType.Success">
            <summary> The result when the expected value is received (or if no value is expected).</summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.ResultType.Response">
            <summary> The result when the expected value is not received but there is an answer.</summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.ResultType.Failure">
            <summary> The result when the expected value is not received from the correct address
            until the time runs out. Or if there is an error.</summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.ApplicationFileManager">
            <summary>
            Provides an interface for managing application files, including log file management, 
            archiving, and configuration settings.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ApplicationFileManager.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger)">
            <summary>
            Provides an interface for managing application files, including log file management, 
            archiving, and configuration settings.
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ApplicationFileManager.EnsureLogDirectoryExists">
            <summary>
            Ensures that the log directory exists by creating it if it does not already exist.
            <para>
            If the directory cannot be created due to an exception, the application will be terminated with an error message.
            </para>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ApplicationFileManager.ArchiveLogs">
            <summary>
            Archives the log files in the log directory by compressing them into a ZIP archive when the number of log files exceeds 50.
            <para>
            If there are more than 50 log files, the method will create a new ZIP archive containing all log files, excluding the current log file.
            If there are already 10 or more existing archives, it will delete the oldest ones before creating a new archive.
            This ensures that only the log files from the last 50 application runs are retained.
            </para>
            <para>
            If there are fewer than 50 log files, no archiving will be performed.
            </para>
            <para>
            If an error occurs during the process, it logs the error message to the console and log file.
            </para>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ApplicationFileManager.DeleteAllExceptLogsAndResources">
            <summary>
            Deletes all directories in the application directory except for those named 'logs' and 'resources'.
            <para>
            This method iterates through all subdirectories in the base directory and deletes them, excluding the directories 'logs' and 'resources'.
            This helps in cleaning up directories from previous sessions, retaining only the specified directories for future use.
            </para>
            <para>
            In case of an error during the deletion, such as unauthorized access or I/O errors, the method logs the error message to the console and continues processing other directories.
            </para>
            <para>
            The method logs the path of each successfully deleted directory to the application log for tracking purposes.
            </para>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ApplicationFileManager.EnsureSettingsFileExists(System.String)">
            <summary>
            Ensures a configuration file exists at the specified path. If not, it creates the file and sets defaults 
            based on the system theme and language. Handles exceptions such as unauthorized access, invalid paths, 
            and I/O errors, displaying an error messag
            
            <param name="settingsPath">The path to the configuration file.</param>
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings">
            <summary>
            Provides an implementation for managing application settings, including reading from and writing to an XML file.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings.EnableLightTheme">
            <summary>
            Gets or sets a value indicating whether the light theme is enabled. Default is true.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings.AppLang">
            <summary>
            Gets or sets the language used by the application. Default is French.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings.AppScaleFactor">
            <summary>
            Gets or sets the scale factor of the application interface. Default is 100.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings._settingsFilePath">
            <summary>
            Path to the application settings file. Default is ./settings.xml.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings.#ctor(KNX_Virtual_Integrator.Model.Interfaces.IApplicationFileManager,KNX_Virtual_Integrator.Model.Interfaces.ISystemSettingsDetector,KNX_Virtual_Integrator.Model.Interfaces.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings"/> class.
            </summary>
            <remarks>
            Loads the settings from the XML file if it exists. If the file is not found or an error occurs during loading,
            the default settings are used.
            </remarks>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings.#ctor">
            <summary>
            Parameterless constructor required for XML serialization
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings.Save">
            <summary>
            Saves the current settings to an XML file.
            </summary>
            <remarks>
            Serializes the settings and writes them to the XML file. If an error occurs during the saving process, 
            the error should be handled accordingly.
            </remarks>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.BusConnection">
            <summary>
            Class handling the connection to and disconnection from the KNX Bus
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection.GlobalKnxNamespace">
            <summary>
            Name space used for KNX operations
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection.Bus">
            <summary>
                The instance of the KNX bus.
                It is wrapped to reduce the code dependency on the Falcon library and allow testing.
                The actual KNX Bus can be null and is accessed through
                <see cref="P:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.IsNull"/> and <see cref="P:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.KnxBusSetter"/>
                The wrapper can possess more implementations in case more methods have to be used.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._logger">
            <summary>
                The instance of the Logger. It is used to log and print to the console the application activity,
                while reducing code dependency on Console library.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection.CancellationTokenSource">
            <summary>
                Allows cancelling of ongoing asynchronous tasks. Can be null when there is no ongoing task.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.DiscoveredInterfaces">
            <summary>
                Observable collection of the discovered bus interfaces for the current connection type.
                It contains instances of <see cref="T:KNX_Virtual_Integrator.ViewModel.ConnectionInterfaceViewModel"/> of the discovered interfaces
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._selectedInterface">
            <summary>
                Private property that is handled with <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.SelectedInterface"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.SelectedInterface">
            <summary>
                Currently selected bus interface. It is automatically updated and linked with the UI.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._isBusy">
            <summary>
                Private property that is handled with <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.IsBusy"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.IsBusy">
            <summary>
                Indicate whether there is an ongoing activity (like a connection).
                Used to deactivate the UI during the activity.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._isConnected">
            <summary>
                Private property that is handled with <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.IsConnected"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.IsConnected">
            <summary>
                Indicates whether the bus is connected or not. It is linked with the UI.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._connectionState">
            <summary>
                Private property that is handled with <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.ConnectionState"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.ConnectionState">
            <summary>
                Current connection state (i.e. : "Connected" ou "Disconnected"). Automatically updated
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._currentInterface">
            <summary>
                Private property that is handled with <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.CurrentInterface"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.CurrentInterface">
            <summary>
                Current connection interface
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._natAddress">
            <summary>
                Private property that is handled with <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.NatAddress"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.NatAddress">
            <summary>
                IP address of the distant router to allow NAT connection
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.NatAccess">
            <summary>
                Property that indicates whether we use NAT to access the interface.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection.NatPort">
            <summary>
                Hardcoded default port for connection with NAT (3671 is the default for KNX)
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.InterfaceAddress">
            <summary>
                Individual Address for the given IP Secure interface
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._keysFilePassword">
            <summary>
                Private property that is handled by <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.KeysFilePassword"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.KeysFilePassword">
            <summary>
                Password that allows access to the file that holds the knxkeys. See <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.KeysPath"/>
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._secureKeysFilePassword">
            <summary>
                Secure password that is currently selected
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._keysPath">
            <summary>
                Private property that is handled by <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.KeysPath"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.KeysPath">
            <summary>
                The path to the file that holds the keys for the IP secure connection
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._selectedConnectionType">
            <summary>
                Private property that is handled by <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.SelectedConnectionType"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.SelectedConnectionType">
            <summary>
                Connection Type chosen by the user (IP, IP NAT, USB). Its changes are shared with the user interface
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection._connectionErrorMessage">
            <summary>
                Private property that is handled with <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.ConnectionErrorMessage"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.ConnectionErrorMessage">
            <summary>
                Property that possesses the error message to be printed to the user interface.
                It is collected through <see cref="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.CheckError(System.Exception)"/>.
                Different cases : 
             </summary>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Implementations.BusConnection.PropertyChanged">
            <summary>
                The event that is fired when a property has changed.
            </summary>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Implementations.BusConnection.BusConnectedReady">
            <summary>
                Event raised when the bus is ready to be connected.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.BusConnectionStateChanged(System.Object,System.EventArgs)">
            <summary>
                Handler that deals with changes in the bus connection state.
                It is called when the <see cref="P:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.ConnectionState"/> changes and updates the interface
                by calling <see cref="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.UpdateConnectionState"/>.
            </summary>
            <param name="sender">The object that fired the event</param>
            <param name="e">The argument of the event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.OnBusConnectedReady(KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper)">
            <summary>
                Private method which updates the bus readiness to be connected
                through firing the event <see cref="E:KNX_Virtual_Integrator.Model.Implementations.BusConnection.BusConnectedReady"/>.
            </summary>
            <param name="bus">The object <see cref="T:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper"/> which represents the KNX Bus.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.OnSelectedConnectionTypeChanged">
            <summary>
                Asynchronous method called when then <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.SelectedConnectionType"/> changes.
                It tries to discover new interfaces with <see cref="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.DiscoverInterfacesAsync"/>.
                If there is an error, it catches it and prints it.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.WhenPropertyChanged(System.String)">
            <summary>
                Updates the interface when a property has been modified
            </summary>
            <param name="propertyName">The property that was modified.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.ConnectBusAsync">
            <summary>
                Establishes a connection to the Knx Bus asynchronously
                It first verifies whether there is an ongoing operation. If not, it proceeds with the connection.
                When it succeeds, it updates the connection state and its subscribers.
                When it fails, it prints an error message.
            </summary>
            <returns>A task representing the completion to the connection.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.CheckError(System.Exception)">
            <summary>
                Handles every exception raised in the bus context that needs to be shown to the user
            </summary>
            <param name="e">The raised exception.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.CheckBusConnection">
            <summary>
                Verifies if the connection was successful and updates the user interface.
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.DisconnectBusAsync">
            <summary>
                Asynchronously disconnects from the KNX Bus.
                It first verifies whether the bus is connected or if there is an ongoing operation.
                If not, it starts the disconnection. When it succeeds, it updates the interface and prints a log.
            </summary>
            <returns>Une tâche représentant l'opération de déconnexion asynchrone.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.DiscoverInterfacesAsync">
            <summary>
                Discover asynchronously the available interfaces according to the <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.SelectedConnectionType"/>.
                This method discovers USB and IP interfaces and adds them to <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.DiscoveredInterfaces"/>.
                The results are updated to the user interface.
            </summary>
            <returns>A task representing the completion of the method</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.UpdateConnectionState">
            <summary>
                Updates the <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.ConnectionState"/> according to the value of <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.IsConnected"/>
                It is set to "Connected" if true and "Disconnected" if not
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger,KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper)">
            <summary>
                Initialises a new instance of <see cref="T:KNX_Virtual_Integrator.Model.Implementations.BusConnection"/>.
                It also creates a new instance of <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to store the discovered interfaces.
            </summary>
            <param name="logger">The logger instance to log and print out messages</param>
            <param name="knxBusWrapper">The KnxBus instance with which the class will communicate</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.ResetCancellationTokenSource">
            <summary>
                Resets the CancellationTokenSource if it exists with <see cref="M:System.Threading.CancellationTokenSource.Dispose"/>.
                It then creates a new CancellationTokenSource. It is used to create a new one for ongoing operations.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.ValidateIPv4(System.String)">
            <summary>
                Used for error handling in the case of NAT.
                Checks if given IP address is in fact a correctly written IPv4 address
            </summary>
            <param name="ipString"> The IP address to check.</param>
            <returns> Returns true if the address has the form of an IPv4 address</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.DebugArchiveGenerator">
            <summary>
            Generates debug archives
            </summary>
            <param name="logger">logs exceptions or end of process</param>
            <param name="zipManager">manages .zip archives</param>
            <param name="settings">To get what is to be included in the archives</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.DebugArchiveGenerator.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger,KNX_Virtual_Integrator.Model.Interfaces.IZipArchiveManager,KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings)">
            <summary>
            Generates debug archives
            </summary>
            <param name="logger">logs exceptions or end of process</param>
            <param name="zipManager">manages .zip archives</param>
            <param name="settings">To get what is to be included in the archives</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.DebugArchiveGenerator.WriteSystemInformationDebugFile(System.Boolean,System.Boolean)">
            <summary>
            Generates a debug file for the application.
            Creates a debug directory if it does not exist and writes system, software, and hardware information
            to a file named "debugInfo.txt". System and hardware information are optional and can be included based on the parameters provided.
            </summary>
            <param name="includeOsInfo">Indicates whether to include operating system information. (Optional)</param>
            <param name="includeHardwareInfo">Indicates whether to include hardware information. (Optional)</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.DebugArchiveGenerator.CreateDebugArchive(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a debug archive by collecting all debug-related files, including optional system and hardware information,
            imported projects, and a list of removed group addresses. The archive is then saved as a ZIP file.
            </summary>
            <param name="includeOsInfo">Specifies whether to include operating system information in the archive.</param>
            <param name="includeHardwareInfo">Specifies whether to include hardware information in the archive.</param>
            <param name="includeImportedProjects">Specifies whether to include imported projects in the archive.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.DebugArchiveGenerator.FormatDriverDate(System.String)">
            <summary>
            Formats driver date strings into a readable "DD/MM/YYYY" format.
            </summary>
            <param name="driverDate">
            The driver date string in the format "YYYYMMDDHHMMSS.SSSSSS-UUU".
            </param>
            <returns>
            A formatted date string in "DD/MM/YYYY" format if the input is valid; 
            otherwise, "Date inconnue" or "Date invalide".
            </returns>
            <remarks>
            This function takes a driver date string typically formatted as "YYYYMMDDHHMMSS.SSSSSS-UUU" and
            extracts the date part (first 8 characters). It then converts this part into a DateTime object 
            and formats it into "DD/MM/YYYY" format. If the input string is null, empty, or less than 8 characters,
            it returns "Date inconnue". If the conversion to DateTime fails, it returns "Date invalide".
            </remarks>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.FileFinder">
            <summary>
            Defines the contract for file finding operations.
            </summary>
            <param name="logger">logs issues and start and end of processes.</param>
            <param name="projectFileManager">the manager to import the files</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FileFinder.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger,KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager)">
            <summary>
            Defines the contract for file finding operations.
            </summary>
            <param name="logger">logs issues and start and end of processes.</param>
            <param name="projectFileManager">the manager to import the files</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FileFinder.FindFile(System.String,System.String)">
            <summary>
            Searches for a specific file within a given directory and its subdirectories.
            </summary>
            <param name="rootPath">The root directory path where the search begins.</param>
            <param name="fileNameToSearch">The name of the file to find.</param>
            <returns>Returns the full path of the file if found; otherwise, returns an empty string.</returns>
            <remarks>
            This method:
            <list type="number">
            <item>Checks if the root directory exists; logs an error if it does not.</item>
            <item>Uses a breadth-first search approach with a queue to explore the directory and its subdirectories.</item>
            <item>Attempts to find the file by comparing the file names in a case-insensitive manner.</item>
            <item>Handles exceptions such as unauthorized access, directory not found, and general I/O errors.</item>
            </list>
            </remarks>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FileFinder.FindZeroXml(System.String)">
            <summary>
            Asynchronously searches for the '0.xml' file in the exported KNX project directory.
            </summary>
            <remarks>
            This method:
            <list type="number">
            <item>Updates the loading window with progress messages in the application's selected language.</item>
            <item>Calls the <see cref="M:KNX_Virtual_Integrator.Model.Implementations.FileFinder.FindFile(System.String,System.String)"/> method to search for the '0.xml' file within the directory specified by <see cref="P:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.ProjectFolderPath"/>.</item>
            <item>If the file is found, updates the <see cref="P:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.ZeroXmlPath"/> property and logs the result.</item>
            <item>If the file is not found, logs an error message and shuts down the application.</item>
            <item>Handles exceptions related to file access, directory not found, and general I/O errors.</item>
            </list>
            </remarks>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.FileLoader">
            <summary>
            Defines the contract for file loading operations.
            </summary>
            <param name="logger">logs the issues and process state.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FileLoader.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger)">
            <summary>
            Defines the contract for file loading operations.
            </summary>
            <param name="logger">logs the issues and process state.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FileLoader.LoadXmlDocument(System.String)">
            <summary>
            Loads an XML document from a specified path.
            </summary>
            <param name="path">The path to the XML document to load.</param>
            <returns>Returns an XDocument if the file is successfully loaded; otherwise, returns null.</returns>
            <remarks>
            This method:
            <list type="number">
            <item>Attempts to load the XML document from the specified path.</item>
            <item>Catches and logs specific exceptions such as FileNotFoundException, DirectoryNotFoundException, IOException, UnauthorizedAccessException, and XmlException.</item>
            <item>Logs an error message and returns null if an exception is thrown.</item>
            </list>
            </remarks>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary">
             <summary>
             Manages a dictionary of functional models (FunctionalModel).
            
             Provides methods to add, remove, retrieve, and update models in the dictionary.
             Each model is identified by a unique key (int). This interface enables centralized 
             management of functional models, allowing standardized operations on the dictionary.
             
             - AddFunctionalModel: Adds a functional model to the dictionary.
             - RemoveFunctionalModel: Removes a functional model using its key.
             - GetAllModels: Retrieves all functional models from the dictionary.
             </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary._functionalModels">
            <summary>
            List of models
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary._nbStructuresCreated">
            <summary>
            The number of structure created.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.FunctionalModels">
            <summary>
            Gets or sets the list of models.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.#ctor">
            <summary>
            Default constructor of the dictionary. Gives a default list of structures
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.AddKeyword(System.Int32,System.String)">
            <summary>
            Adds a keyword to the model at an index in the dictionary
            </summary>
            <param name="index">the index in the dictionary</param>
            <param name="word">the keyword</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.#ctor(System.String)">
            <summary>
            Constructor of the dictionary
            </summary>
            <param name="path">file path from which to import the dictionary</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.AddFunctionalModel(KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure,System.Boolean)">
            <summary>
            Adds a model to the dictionary
            </summary>
            <param name="functionalModel">the structure of the model</param>
            <param name="imported">if the model is imported</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.AddFunctionalModel(KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Adds a model to the dictionary
            </summary>
            <param name="functionalModel">the structure of the model</param>
            <param name="imported">if the model is imported</param>
            <param name="keywords">the keywords of the model</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.RemoveFunctionalModel(System.Int32)">
            <summary>
            Removes a model at a certain index in the dictionary
            </summary>
            <param name="index">the index of the model</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.GetAllModels">
            <summary>
            Gets all the models of the dictionary.
            </summary>
            <returns>the list of models</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.ExportDictionary(System.String)">
            <summary>
            Creates an XML file representing the dictionary.
            </summary>
            <param name="path">Path where the XML has to be exported </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.ExportDictionary(System.Xml.XmlDocument)">
            <summary>
            Exports the dictionary to an XmlElement 
            </summary>
            <param name="doc">The document to which should be exported the dictionary</param>
            <returns>The created document</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.ImportDictionary(System.String)">
            <summary>
            Imports a functional model dictionary from a path.
            </summary>
            <param name="path">Path of the dictionary</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.ImportDictionary(System.Xml.XmlNodeList)">
            <summary>
            Imports a functional model dictionary
            </summary>
            <param name="xnList">the list from which to import the dictionary</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.HasSameStructure(KNX_Virtual_Integrator.Model.Entities.FunctionalModel)">
            <summary>
            Checks if a Functional Model has the same structure as the ones in the dictionary
            </summary>
            <param name="functionalModel">Structure to find in the dictionary</param>
            <returns>Index of the corresponding structure, or null if not found</returns>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.PropertyChanged">
            <summary>
            The event that occurs when the Dictionary changes. 
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.OnPropertyChanged(System.String)">
            <summary>
            Invokes the event <see cref="E:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.PropertyChanged"/> when the BigIntegerItem changes.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelDictionary.CheckName(System.String)">
            <summary>
            Checks the index of a model with a certain name
            </summary>
            <param name="name">the name of the model</param>
            <returns>the index of the model if found; -1 otherwise.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList">
             <summary>
             manages a list of functional models (FunctionalModel).
            
             Provides methods to add, remove, retrieve, and update models in the list.
             Each model is identified by a unique key (int). This interface enables centralized 
             management of functional models, allowing standardized operations on the dictionary.
             
             - AddFunctionalModel: Adds a functional model to the dictionary.
             - RemoveFunctionalModel: Removes a functional model using its key.
             - GetAllModels: Retrieves all functional models from the dictionary.
             </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList._nbModelsCreated">
            <summary>
            The number of models created
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.FunctionalModels">
            <summary>
            The list structure of functional models.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.FunctionalModelDictionary">
            <summary>
            The dictionary of models and structures
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.#ctor">
            <summary>
            Default model list constructor
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.#ctor(System.String)">
            <summary>
            Model list constructor. Takes the dictionary from a file's path.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.AddToList(System.Int32)">
            <summary>
            Copies a functional model from the dictionary to the list.
            </summary>
            <param name="index">Index in the dictionary of the Functional Model to copy in the list</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ResetCount(System.Int32)">
            <summary>
            Resets the count of models in a structure
            </summary>
            <param name="index">the structure index</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.AddNewCount">
            <summary>
            Creates a new counter associated to a new list in the list of lists
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.AddToList(System.Int32,KNX_Virtual_Integrator.Model.Entities.FunctionalModel,System.Boolean)">
            <summary>
            Copies a functional model to the list.
            </summary>
            <param name="functionalModel">FunctionalModel to add</param>
            <param name="index"> Index of the structure</param>
            <param name="copy"> boolean indicating whether the model is a copy or not</param>    
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.DeleteFromList(System.Int32,System.Int32)">
            <summary>
            Deletes a functional model in the list at the desired index.
            </summary>
            <param name="indexOfStructure">Index of the structure of the Functional Model to delete in the list</param>
            <param name="indexOfModel">Index of the Functional Model to delete in the list</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.DuplicateModel(System.Collections.Generic.List{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Int32)">
            <summary>
            Duplicates the model of a given index in a list
            </summary>
            <param name="models">List containing the model to be copied, and in which the copy will be</param>
            <param name="index">Index of the model to copy</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.AddToDictionary(KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure,System.Boolean)">
            <summary>
            Adds a personalized model to the dictionary of models.
            </summary>
            <param name="model">The model to add to the dictionary</param>
            <param name="imported">Boolean to check if the functionalModelStructure to add is created manually or by the application during importation</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.DeleteFromDictionary(System.Int32)">
            <summary>
            Deletes a Structure from the dictionary .
            </summary>
            <param name="index">Index of the Structure to delete from in the dictionary. </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ResetInDictionary(System.Int32,KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure)">
            <summary>
            Resets the saved structure by clearing the dictionary then putting back in the structure at the index.
            </summary>
            <param name="index">The index at which the structure was saved (and to save)</param>
            <param name="savedStructure">the structure to be saved</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ExportDictionary(System.String)">
            <summary>
            Creates an XML file representing the dictionary.
            </summary>
            <param name="path">Path where the XML has to be exported </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ExportDictionary(System.Xml.XmlDocument)">
            <summary>
            Creates an XMLElement representing the dictionary.
            </summary>
            <param name="doc">The document in which the element is created.</param>
            <returns>The created XmlElement</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ImportDictionary(System.String)">
            <summary>
            Imports an XML file representing the dictionary.
            </summary>
            <param name="path">Path of the xml. </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ImportDictionary(System.Xml.XmlNodeList)">
            <summary>
            Imports a functional model dictionary after clearing the list of models.
            </summary>
            <param name="xnList">the list from which to import the dictionary</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.GetAllModels">
            <summary>
            Method to get all the models in the dictionary.
            </summary>
            <returns>Returns a list containing all the functional models. </returns>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.PropertyChanged">
            <summary>
            The event that occurs when the list changes. 
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.OnPropertyChanged(System.String)">
            <summary>
            Invokes the event <see cref="E:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.PropertyChanged"/> when the list changes.
            </summary>
            <param name="propertyName">The name of the changed property</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ExportList(System.String)">
            <summary>
            Creates an XML file representing the list of list.
            </summary>
            <param name="path">Path where the XML has to be exported </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ExportList(System.Xml.XmlDocument)">
            <summary>
            Exports the list of models in each structure from an XmlDocument
            </summary>
            <param name="doc">The XmlDocument in which is created the XmlElement.</param>
            <returns>The created XmlElement</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ExportListAndDictionary(System.String,System.String)">
            <summary>
            see <see cref="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ExportList(System.String)"/> and <see cref="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ExportDictionary(System.String)"/>
            </summary>
            <param name="path">Path of the file where everything has to be exported to.</param>
            <param name="projectName">Name of the imported project or file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ExportListAndDictionary(System.String,System.String,System.Xml.Linq.XDocument)">
            <summary>
            see <see cref="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ExportList(System.String)"/> and <see cref="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ExportDictionary(System.String)"/>
            </summary>
            <param name="path">Path of the file where everything has to be exported to.</param>
            <param name="projectName">Name of the imported project or file.</param>
            <param name="GroupAddressFile">The imported project or file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ImportList(System.String)">
            <summary>
            Imports the structure list from a file
            </summary>
            <param name="path">the path of the file</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ImportList(System.Xml.XmlNodeList)">
            <summary>
            Imports the structure list from an XmlNodeList
            </summary>
            <param name="xnList">The XmlNodeList to import from</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ImportListAndDictionary(System.String)">
            <summary>
            see <see cref="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ImportList(System.String)"/> and <see cref="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ImportDictionary(System.String)"/>.
            </summary>
            <param name="path">the path of the file to import from.</param>
            <returns> The name of the importef file or project. </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ImportListAndDictionaryWithDoc(System.String)">
            <summary>
            see <see cref="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ImportList(System.String)"/> and <see cref="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ImportDictionary(System.String)"/>.
            </summary>
            <param name="path">the path of the file to import from.</param>
            <returns> The name of the imported file or project and the file itself. </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ReinitializeNbModels(System.Int32)">
            <summary>
            see <see cref="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.ResetCount(System.Int32)"/>.
            </summary>
            <param name="index">The index of the structure.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.AddNewEmptyStruct">
            <summary>
            Adds a new empty structure. <seealso cref="P:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList.FunctionalModels"/> <seealso cref="F:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList._nbModelsCreated"/>
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.GroupAddressMerger">
            <summary>
            Merges group address with those that have more than 80% similarity with the IeAddressSet.
            It finds and sort the ie with the cmd after finding the cmd.
            </summary>
            <param name="stringManagement">The string manager</param>
            <param name="logger">To log notable events</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressMerger.#ctor(KNX_Virtual_Integrator.Model.Implementations.StringManagement,KNX_Virtual_Integrator.Model.Interfaces.ILogger)">
            <summary>
            Merges group address with those that have more than 80% similarity with the IeAddressSet.
            It finds and sort the ie with the cmd after finding the cmd.
            </summary>
            <param name="stringManagement">The string manager</param>
            <param name="logger">To log notable events</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressMerger.MergeSingleElementGroups(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Xml.Linq.XElement}},System.Collections.Generic.List{System.Xml.Linq.XElement})">
            <summary>
            Merges single-element groups in the grouped addresses dictionary with entries from the provided 
            IeAddressesSet if their names have a similarity of 80% or more.
            
            This method iterates over groups in the groupedAddresses dictionary that contain a single XElement 
            and attempts to find matching entries in the IeAddressesSet based on a similarity threshold of 80%. 
            If a similar entry is found, it is added to the corresponding group.
            
            <param name="groupedAddresses">The dictionary of grouped addresses that will be modified and potentially merged with elements from IeAddressesSet.</param>
            <param name="ieAddressesSet">A list of XElement entries that will be compared against single-element groups in groupedAddresses for potential merging.</param>
            <returns>Returns the modified dictionary of grouped addresses with merged entries.</returns>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressMerger.GetElementsBySimilarity(System.Xml.Linq.XElement,System.Collections.Generic.List{System.Xml.Linq.XElement})">
            <summary>
            Processes the name attribute of the provided 'cmdElement' XElement to extract a relevant search string, 
            and then finds and sorts elements from the 'ieAddressesSet' based on their similarity to this search string.
            
            This method performs the following steps:
            1. Extracts the value of the "Name" attribute from the 'cmdElement' XElement and assigns it to 'searchString'.
            2. Removes the prefix "Cmd" from the beginning of 'searchString', if present.
            3. Uses a regular expression to strip off any trailing numeric segments from 'searchString', 
               leaving only the core part of the name for comparison.
            4. Sorts the elements in 'ieAddressesSet' by their similarity to the cleaned 'searchString', 
               in descending order of similarity. The similarity is computed using a custom similarity function.
            
            <param name="cmdElement">The XElement representing the command from which the search string is derived.</param>
            <param name="ieAddressesSet">The collection of XElement entries to be compared against the search string.</param>
            <returns>Returns a list of elements from 'ieAddressesSet', sorted by their similarity to the cleaned 'searchString'.</returns>
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.GroupAddressProcessor">
            <summary>
            Manages the processing of group address names : normalize, according to the architecture and adding one more to the dictionary, but normalized.
            </summary>
            <param name="logger">To log notable event</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressProcessor.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger)">
            <summary>
            Manages the processing of group address names : normalize, according to the architecture and adding one more to the dictionary, but normalized.
            </summary>
            <param name="logger">To log notable event</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressProcessor.NormalizeName(System.String)">
            <summary>
            Normalizes the name by removing specific prefixes.
            </summary>
            <param name="name">The name to normalize.</param>
            <returns>The normalized name.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressProcessor.AddToGroupedAddresses(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Xml.Linq.XElement}},System.Xml.Linq.XElement,System.String)">
             <summary>
             Adds a group address to the grouped addresses dictionary with a normalized common name.
            
             This method ensures that the group address is added to the list associated with the specified
             common name. If the common name does not already exist in the dictionary, it is created.
            
             <param name="groupedAddresses">The dictionary of grouped addresses where the group address will be added.</param>
             <param name="ga">The group address element to be added.</param>
             <param name="commonName">The common name used for grouping the address.</param>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressProcessor.FilterElements(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Xml.Linq.XElement}})">
            <summary>
            Filters a dictionary of XElement lists, retaining only those lists where all elements
            share the same first word in their "Name" attribute.
            
            This method processes each list in the dictionary that contains more than one XElement. 
            It checks if all elements in the list start with the same word (separated by spaces or underscores) 
            in their "Name" attribute. If they do, the list is added to the resulting dictionary.
            
            <param name="dictionary">A dictionary where the key is a string and the value is a list of XElement objects.</param>
            <returns>A dictionary containing only the lists of XElement objects where all elements have the same first word in their "Name" attribute.</returns>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressProcessor.DecodeAddress(System.String,System.Int32)">
            <summary>
            Decodes a string representing a numeric value into a formatted string based on the group address structure.
            
            This method takes a string representation of a numeric value and converts it into a formatted string. The format of the output string depends on the specified group address structure:
            
            - For a 3-level group address structure, the value is decoded into three components: "champ1/champ2/champ3".
            - For a 2-level group address structure, the value is decoded into two components: "champ1/champ2".
            
            The decoding is performed as follows:
            - For 3-level structure:
              - The third component (`champ3`) is extracted as the least significant 8 bits.
              - The second component (`champ2`) is extracted as the next 3 bits.
              - The first component (`champ1`) is extracted as the most significant 5 bits.
            - For 2-level structure:
              - The second component (`champ2`) is extracted as the least significant 11 bits.
              - The first component (`champ1`) is extracted as the next 5 bits.
            
            If the input string cannot be converted to an integer, or if the group address structure is not recognized, the method logs an error message and returns the original input string.
            
            <param name="valueString">The string representation of the numeric value to decode.</param>
            <param name="groupAddressStructure">An integer indicating the group address structure: 2 for 2-level and 3 for 3-level.</param>
            <returns>A formatted string representing the decoded value based on the group address structure. Returns the original string if conversion fails or if the structure is unrecognized.</returns>
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager">
            <summary>
            Defines methods for managing group addresses extracted from XML files.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.#ctor(KNX_Virtual_Integrator.Model.Implementations.Logger,KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager,KNX_Virtual_Integrator.Model.Implementations.FileLoader,KNX_Virtual_Integrator.Model.Implementations.NamespaceResolver,KNX_Virtual_Integrator.Model.Implementations.GroupAddressProcessor,KNX_Virtual_Integrator.Model.Implementations.GroupAddressMerger)">
            <summary>
            Defines methods for managing group addresses extracted from XML files.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.GroupedAddresses">
            <summary>
            Dictionary where each Cmd addresses is grouped with the corresponding Ie adresses
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.IeAddressesSet">
            <summary>
            List of all the Ie addresses
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager._groupAddressStructure">
            <summary>
            The structure of the Group Addresses : 2 or 3 levels
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.GroupAddressStructure">
            <summary>
            The structure of the Group Addresses : 2 or 3 levels
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.Prefixes">
            <summary>
            Group address names prefixes. It is initialized for command
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.ExtractGroupAddress(KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList)">
             <summary>
             Extracts group address information from a specified XML file.
            
             Determines the file path to use based on user input and whether a specific group address
             file is chosen or a default file is used. Depending on the file path, it processes the XML
             file to extract and group addresses either from a specific format or a standard format.
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.NewProcessZeroXmlFile(System.Xml.Linq.XDocument,KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList)">
             <summary>
             Processes an XML file in the Zero format to extract and group addresses.
            
             This method extracts device references and their links, processes group addresses, and 
             groups them based on device links and common names. It handles the creation and updating 
             of grouped addresses, avoiding name collisions by appending suffixes if necessary.
            
             <param name="groupAddressFile">The XML document containing group address data in Zero format.</param>
             <param name="functionalModelList">The list of functional models to fill</param>
             </summary>
             <returns> Returns an Xdocument with only the group addresses. </returns>     
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.ProcessZeroXmlFile(System.Xml.Linq.XDocument,KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList)">
             <summary>
             Processes an XML file in the Zero format to extract and group addresses.
            
             This method extracts device references and their links, processes group addresses, and 
             groups them based on device links and common names. It handles the creation and updating 
             of grouped addresses, avoiding name collisions by appending suffixes if necessary.
            
             <param name="groupAddressFile">The XML document containing group address data in Zero format.</param>
             <param name="functionalModelList">The list of functional models to fill</param>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.ProcessStandardXmlFile(System.Xml.Linq.XDocument)">
             <summary>
             Processes an XML file in the standard format to extract and group addresses.
            
             This method processes group addresses from the XML file, normalizing the names by removing
             specific prefixes ("Ie" or "Cmd") and grouping addresses based on the remaining common names.
            
             <param name="groupAddressFile">The XML document containing group address data in standard format.</param>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.NewProcessStandardXmlFile(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList,System.Boolean)">
             <summary>
             Processes an XML file in the standard format to extract and group addresses.
            
             This method processes group addresses from the XML file. To do so, there are 3 different protocols. First if the name of the
             group address contains keywords linked to a strucutre, the model is associated to this structure and the DPTs are put according to the structure.
             If the name is not recognized, takes all the commands and creates a tested element for each. Then the structure is assessed.
             If it has the same number of elements with the same commands, links it to the structure and puts the DPTs where they should be.
             Otherwise, only connects IE_x with CMD_x.
            
             <param name="modelStructures">The XML document containing group address data in standard format.</param>
             <param name="functionalModelList">The list of lists of functional models.</param>
             <param name="is0"> The boolean acknowledging if the document is a 0.xml (true) or a group address file (false) </param>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.DetermineGroupAddressStructure0Xml(System.Xml.Linq.XDocument)">
            <summary>
            Determines the level structure of group addresses in an XML document to check for overlaps.
            
            This method examines an XML document containing group address ranges and specific group addresses.
            It helps in identifying whether the group addresses are organized into 2 levels or 3 levels by detecting if there are any overlapping addresses.
            
            If the addresses are detected to overlap, the method returns the value 3.
            If no overlaps are found, the method returns the value 2.
            
            <param name="doc">The XML document (XDocument) containing the group address ranges and specific group addresses.</param>
            <returns>An integer indicating the overlap status: 3 for detected overlap, 2 for no overlap.</returns>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.DetermineGroupAddressStructureGroupAddressFile(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Determines the level structure of group addresses in an XML document to check for overlaps.
            
            This method examines an XML document containing group address ranges and specific group addresses.
            It helps in identifying whether the group addresses are organized into 2 levels or 3 levels by detecting if there are any overlapping addresses.
            
            If the addresses are detected to overlap, the method returns the value 3.
            If no overlaps are found, the method returns the value 2.
            
            <param name="modelStructures">The list of XElements containing the group address ranges and specific group addresses.</param>
            <returns>An integer indicating the overlap status: 3 for detected overlap, 2 for no overlap.</returns>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.FindMajorityPrefix(System.Collections.Generic.List{System.String},System.Double)">
            <summary>
            Finds the biggest prefix corresponding to at least threshold (default 90 %) of the addresses
            </summary>
            <param name="strings">List of string where the prefix has to be found </param>
            <param name="threshold">Percentage of names that need to have the same prefix</param>
            <returns>The biggest prefix shared by at least the threshold</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.FindMajoritySuffix(System.Collections.Generic.List{System.String},System.Double)">
            <summary>
            Finds the biggest suffix corresponding to at least threshold (default 90 %) of the addresses
            </summary>
            <param name="strings">List of string where the suffix has to be found</param>
            <param name="threshold">Percentage of names that need to have the same suffix</param>
            <returns>The biggest suffix shared by at least the threshold</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.FindSuffixInModels(System.String,System.Collections.Generic.List{KNX_Virtual_Integrator.Model.Entities.FunctionalModel})">
            <summary>
            Finds the functional model with the name containing the string
            </summary>
            <param name="suffix"> String to find in the model name</param>
            <param name="models"> List of models where the suffix will be searched</param>
            <returns>The index of the model containing the suffix in the list </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager.FindStringInElement(System.String,KNX_Virtual_Integrator.Model.Entities.FunctionalModel)">
            <summary>
            Finds in a model the index of the element containing the right string
            </summary>
            <param name="stringToFind">String to find in the name of the dpt</param>
            <param name="model">The mdoel where the string has to be found</param>
            <returns></returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication">
            <summary>
            Represents the communication with the bus in terms of group addresses and values.
            Allows writing and reading information from the bus while checking its state.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupAddress">
            <summary>
            Gets or sets the address with which the program will communicate with the bus.
            It specifies which Group Address will make use or read the <see cref="P:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupValue"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupValue">
            <summary>
            Gets the group value to send to the bus.
            It represents which state the object will be in.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.#ctor(KNX_Virtual_Integrator.Model.Implementations.BusConnection,KNX_Virtual_Integrator.Model.Interfaces.ILogger)">
            <summary>
            Initializes an instance of <see cref="T:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication"/> with the specified bus connection.
            Subscribes to the event <see cref="E:KNX_Virtual_Integrator.Model.Implementations.BusConnection.BusConnectedReady"/> to be informed when the bus is ready.
            </summary>
            <param name="busConnection">The object <see cref="T:KNX_Virtual_Integrator.Model.Implementations.BusConnection"/> used to communicate with the KNX Bus.</param>
            <param name="logger">The object <see cref="T:KNX_Virtual_Integrator.Model.Implementations.Logger"/> used for logging events.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupValueWriteOnAsync">
            <summary>
            Dev method. Sends asynchronously the value "on" to a specified address.
            First verifies the bus state before sending the value.
            Logs an error if it fails. 
            </summary>
            <returns>A task representing the completion of the writing.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupValueWriteOffAsync">
            <summary>
            Dev method. Sends asynchronously the value "off" to a specified address.
            First verifies the bus state before sending the value.
            Logs an error if it fails. 
            </summary>
            <returns>A task representing the completion of the writing.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupValueWriteAsync(Knx.Falcon.GroupAddress,Knx.Falcon.GroupValue)">
            <summary>
            Sends asynchronously a value to a specified address.
            First verifies the bus state before sending the value.
            Logs an error if it fails.
            </summary>
            <param name="addr">The address at which the value is sent.</param>
            <param name="value">The value to send.</param>
            <returns>A task representing the completion of the writing.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.ConvertToGroupValue(System.UInt64,System.Byte[])">
            <summary>
             Converts a uLong value to a byte table to write on the bus
            </summary>
             <param name="toSend">The value to send.</param>
             <param name="groupValue">The table to fill before writing.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.MaGroupValueReadAsync(Knx.Falcon.GroupAddress)">
            <summary>
            Reads asynchronously values from a group address.
            Verifies the bus connection state before sending the request.
            uses a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to capture the read value.
            </summary>
            <param name="groupAddress">The group address at which the value should be read.</param>
            <returns>A task representing the completion of the task, containing the received messages.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupValuesWithinTimerAsync(Knx.Falcon.GroupAddress,System.Int32)">
            <summary>
            Reads asynchronously values from a group address until the timer runs out.
            Verifies the bus connection state before sending the request.
            uses a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to capture the read value.
            </summary>
            <param name="groupAddress">The group address at which the value should be read.</param>
             <param name="timerDuration">Timer in ms under which the message should be received.</param>
            <returns>A task representing the completion of the task, containing the received messages..</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupValuesTimerOrRecievedAWriteAsync(Knx.Falcon.GroupAddress,System.Int32)">
            <summary>
            Reads asynchronously values from a group address until a Write is received or the timer runs out.
            Verifies the bus connection state before sending the request.
            uses a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to capture the read value.
            </summary>
            <param name="groupAddress">The group address at which the value should be read.</param>
             <param name="timerDuration">Timer in ms under which the message should be received.</param>
            <returns>A task representing the completion of the task, containing the received messages.</returns>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.Messages">
            <summary>
            Observable collection of received messages.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication._groupEvents">
            <summary>
            The collection of group event args.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupEvents">
            <summary>
            Gets the collection of group event args.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.OnBusConnectedReady(System.Object,KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper)">
            <summary>
            Event handler called when the new bus is ready for interaction.
            Resets the event handlers of message reception.
            </summary>
            <param name="sender">The event source.</param>
            <param name="newBus">The new connected knx bus.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.BusChanged(KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper,KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper)">
            <summary>
            Unsubscribes the old bus and subscribes the new bus to messages reception.
            Resets the event handlers.
            </summary>
            <param name="oldBus">The old knx bus.</param>
            <param name="newBus">The new knx bus.</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupMessage">
            <summary>
            Represents a message received.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupMessage.DestinationAddress">
            <summary>
            The GroupAddress of the destination 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupMessage.SourceAddress">
            <summary>
            The individual address of the source.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupMessage.Value">
            <summary>
            The GroupValue transported by the message.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupMessage.EventType">
            <summary>
            The type of event associated with the message (Write, Response,..)
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupMessage.Equals(KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.GroupMessage)">
            <summary>
            Checks the equivalence of the Destination and Source address, the EventType and the Value
            </summary>
            <param name="obj">The message to compare</param>
            <returns>true is all are equal(and all except Value are not null). False otherwise</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication.OnGroupMessageReceived(System.Object,Knx.Falcon.GroupEventArgs)">
            <summary>
            Event handler called when a message is received.
            Creates an entry in the list of group messages received.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The args containing the details of the message.</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.Logger">
            <summary>
            Provides logging functionality for the application by writing log entries to a specified log file.
            <para>
            The <see cref="T:KNX_Virtual_Integrator.Model.Implementations.Logger"/> class allows messages to be recorded in a log file, optionally including timestamps, 
            and provides methods for both console output combined with logging and logging to the file only.
            </para>
            <para>
            The log file is automatically named with the current date and time to prevent overwriting previous logs.
            </para>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.Logger.LogPath">
            <summary>
            Stores the file path for the log file. This path is used to determine where the log entries will be written.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.Logger._writer">
            <summary>
            Provides a <see cref="T:System.IO.StreamWriter"/> instance for writing log entries to the log file.
            </summary>
            <remarks>
            This writer is used for appending log messages to the file specified by <see cref="P:KNX_Virtual_Integrator.Model.Implementations.Logger.LogPath"/>.
            </remarks>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Logger.#ctor">
            <summary>
            Default logger constructor (create log and checks the directory)
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Logger.ConsoleAndLogWrite(System.String)">
            <summary>
            Writes a message to the application console and log file without appending a newline after the message.
            <para>
            This method performs the following tasks:
            <list type="bullet">
                <item>
                    Writes the provided message to the console without adding a newline character.
                </item>
                <item>
                    If the console window is visible, scrolls to the end of the console text to ensure the latest message is visible.
                </item>
                <item>
                    Writes the same message to the log file without appending a newline character.
                </item>
            </list>
            </para>
            </summary>
            <param name="msg">The message to be written to the console and log file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Logger.ConsoleAndLogWriteLine(System.String)">
            <summary>
            Writes a message to the application console and log file, including the current date and time, and appends a newline after the message.
            <para>
            This method performs the following tasks:
            <list type="bullet">
                <item>
                    Writes the provided message to the console with a timestamp (date and time) at the beginning, followed by a newline.
                </item>
                <item>
                    If the console window is visible, scrolls to the end of the console text to ensure that the latest message is displayed.
                </item>
                <item>
                    Writes the same message to the log file with a timestamp (date and time) at the beginning, followed by a newline.
                </item>
            </list>
            </para>
            </summary>
            <param name="msg">The message to be written to the console and log file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Logger.LogWrite(System.String)">
            <summary>
            Writes a message to the log file without appending a newline after the message.
            </summary>
            <param name="msg">The message to be written to the log file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Logger.LogWriteLine(System.String)">
            <summary>
            Writes a message to the log file, including the current date and time, and appends a newline after the message.
            </summary>
            <param name="msg">The message to be written to the log file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.Logger.CloseLogWriter">
            <summary>
            Closes the log writer and releases any resources associated with it.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.NamespaceResolver">
            <summary>
            Manages the KNX namespaces from a Xml file.
            </summary>
            <param name="logger">To log errors</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.NamespaceResolver.#ctor(KNX_Virtual_Integrator.Model.Implementations.Logger)">
            <summary>
            Manages the KNX namespaces from a Xml file.
            </summary>
            <param name="logger">To log errors</param>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Implementations.NamespaceResolver.GlobalKnxNamespace">
            <summary>
            Name space of KNX
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.NamespaceResolver.SetNamespaceFromXml(System.String)">
             <summary>
             Sets the global KNX XML namespace from the specified XML file.
            
             This method loads the XML file located at <paramref name="filePath"/> and retrieves
             the namespace declaration from the root element. If a namespace is found, it updates the
             static field <c>_globalKnxNamespace</c> with the retrieved namespace. If the XML file cannot
             be loaded or an error occurs during processing, appropriate error messages are logged.
            
             <param name="filePath">The path to the XML file from which to extract the namespace.</param>
             </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.ParentFinder">
            <summary>
            Provides an implementation of IParentFinder for finding the parent of a specific type in the visual tree.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ParentFinder.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger)">
            <summary>
            Provides an implementation of IParentFinder for finding the parent of a specific type in the visual tree.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ParentFinder.FindParent``1(System.Windows.DependencyObject)">
            <summary>
            Utility method to find the parent of a specific type in the visual tree.
            </summary>
            <typeparam name="T">The type of the parent to find.</typeparam>
            <param name="child">The starting child object from which to search up the visual tree.</param>
            <returns>The parent of type T, or null if no such parent is found.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ParentFinder.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>
            Recursive method that searches for the child of the parent that is of a specific type in the visual tree.
            </summary>
            <param name="parent">The parent from which to search.</param>
            <typeparam name="T">The type of the child.</typeparam>
            <returns>The child of the specified type, found recursively.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator">
            <summary>
            Class handling the generation of the analysis report PDF
            </summary>
            <param name="manager">To get the project name and include it in the PDF</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator.#ctor(KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager)">
            <summary>
            Class handling the generation of the analysis report PDF
            </summary>
            <param name="manager">To get the project name and include it in the PDF</param>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator.LatestReportPath">
            <summary>
            Path to the latest PDF report generated
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator.CreatePdf(System.String,System.String,System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{KNX_Virtual_Integrator.Model.Implementations.ResultType}}}})">
            <summary>
            Creates a PDF document at the specified file path, with the given author name.
            The PDF is generated in A4 format without margins, and includes a header, project information,
            and a tree structure. The generated file path is stored as the latest report path.
            </summary>
            <param name="fileName">The file path where the PDF will be saved.</param>
            <param name="authorName">The name of the author to include in the project information section.</param>
            <param name="testedList"></param>
            <param name="testResults"></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator.GeneratePdfHeader(iText.Layout.Document)">
            <summary>
            Generates the header section of the PDF, including a banner, logo, 
            software name, version information, current date, and the document title. 
            The banner is drawn as a filled rectangle, with the software's logo and name displayed on the left, 
            and version information and the current date on the right. A title is added below the header.
            </summary>
            <param name="document">The PDF document to which the header will be added.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator.GenerateProjectInformationSection(iText.Layout.Document,System.String)">
            <summary>
            Generates the project information section of the PDF, displaying the evaluated installation's name 
            and, if provided, the evaluator's username. It includes a separator line, the project name in bold, 
            and optionally the evaluator's name. The section is formatted with indentation and spacing.
            </summary>
            <param name="document">The PDF document to which the project information section will be added.</param>
            <param name="username">The name of the person conducting the evaluation, optional.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator.GenerateTestListAndResults(iText.Layout.Document,System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{KNX_Virtual_Integrator.Model.Implementations.ResultType}}}})">
            <summary>
            NaN
            </summary>
            <param name="document"></param>
            <param name="testedList"></param>
            <param name="testResults"></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator.GenerateTreeStructure">
            <summary>
            Generates a tree structure of commands within the PDF. The tree includes categories, commands, 
            and labels with specific colors, displayed as a hierarchical list. Each command entry is represented 
            with a background color for the label, followed by the command text. Introductory and concluding 
            text is added to provide context for the structure.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator.OpenLatestReport">
            <summary>
            Opens the most recently generated PDF report using the default system application.
            The file path of the latest report is retrieved from the LatestReportPath variable.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager">
            <summary>
            This class handles importing files or exporting them.
            </summary>
            <param name="logger">used to log notable events</param>
            <param name="settings">to gather the settings from the files</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger,KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings)">
            <summary>
            This class handles importing files or exporting them.
            </summary>
            <param name="logger">used to log notable events</param>
            <param name="settings">to gather the settings from the files</param>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.ProjectFolderPath">
            <summary>
            Gets the path to the exported project folder.
            </summary>
            <remarks>
            This property holds the file path of the project folder where the project files are exported.
            </remarks>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.ProjectName">
            <summary>
             Gets the name of the project the application is currently working on.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.ZeroXmlPath">
            <summary>
            Gets the path to the 0.xml file of the project.
            </summary>
            <remarks>
            This property holds the file path to the 0.xml file associated with the project.
            </remarks>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.GroupAddressFilePath">
            <summary>
            Gets the path to the exported of the group addresses file.
            </summary>
            <remarks>
            This property holds the file path  of the group addresses file
            </remarks>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.GroupAddressFileName">
            <summary>
             Gets the name of the group addresses file the application is currently working on.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.ExtractProjectFiles(System.String)">
            <summary>
            Extracts project files from a .knxproj file. Continuously attempts to process the file until successful or the user cancels.
            </summary>
            <param name="knxprojSourceFilePath">The path to the .knxproj source file.</param>
            <returns>Returns true if the extraction is successful, otherwise returns false.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.NormalizePath(System.String)">
            <summary>
            Normalizes the file path to an absolute path. Handles exceptions related to invalid or overly long paths.
            </summary>
            <param name="path">The file path to normalize.</param>
            <returns>Returns the normalized path or prompts the user to select another file in case of an error.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.GetZipArchivePath(System.String)">
            <summary>
            Retrieves the path for the zip archive based on the .knxproj file path. Validates that the file is a .knxproj file.
            </summary>
            <param name="knxprojSourceFilePath">The path to the .knxproj file.</param>
            <returns>Returns the path for the zip archive or prompts the user to select another file if the input is invalid.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.HandleExistingFile(System.String)">
            <summary>
            Handles the existence of an existing zip file. Deletes it if it exists, and logs errors if the delete operation fails.
            </summary>
            <param name="zipArchivePath">The path to the zip archive.</param>
            <returns>Returns true if the file was handled successfully, otherwise returns false.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.CopyToZipArchive(System.String,System.String)">
            <summary>
            Copies the .knxproj file to a new zip archive. Handles various file-related exceptions and logs errors if the operation fails.
            </summary>
            <param name="knxprojSourceFilePath">The path to the .knxproj file.</param>
            <param name="zipArchivePath">The path to the new zip archive.</param>
            <returns>Returns true if the file was copied successfully, otherwise returns false.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.HandleExportFolder(System.String)">
            <summary>
            Manages the export folder by deleting any existing folder if it exists. Logs errors if the delete operation fails.
            </summary>
            <param name="knxprojSourceFilePath">The path to the .knxproj file used to determine the export folder path.</param>
            <returns>Returns true if the folder was handled successfully, otherwise returns false.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.ExtractZipFile(System.String,System.String)">
            <summary>
            Extracts the contents of the zip archive to the export folder and deletes the zip file upon successful extraction.
            </summary>
            <param name="zipArchivePath">The path to the zip archive.</param>
            <param name="knxprojSourceFilePath">The path to the .knxproj file used to determine the export folder path.</param>
            <returns>Returns true if the extraction was successful, otherwise returns false.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.ExtractGroupAddressFile(System.String)">
            <summary>
            Extracts the group addresses file at the specified path and place it into the designated export folder.
            </summary>
            <param name="groupAddressesSourceFilePath">The path to the group addresses file that will be extracted.</param>
            <returns>Returns <c>true</c> if the file is successfully extracted and the process was not cancelled; otherwise, returns <c>false</c>.</returns>
            <remarks>
            This method performs the following steps:
            <list type="number">
            <item>Normalizes the path of the group addresses file and handles potential path-related exceptions.</item>
            <item>Deletes any existing group addresses file to avoid conflicts.</item>
            <item>Copy the file to the right folder path and indicates successful extraction if no cancellation occurred.</item>
            </list>
            </remarks>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.SelectAnotherFile">
            <summary>
            Prompts the user to select a file path using an OpenFileDialog.
            </summary>
            <returns>Returns the selected file path as a string if a file is chosen; otherwise, returns an empty string.</returns>
            <remarks>
            This method:
            <list type="number">
            <item>Displays a file open dialog with predefined filters and settings.</item>
            <item>Returns the path of the selected file if the user confirms their choice.</item>
            <item>Handles potential exceptions, including invalid dialog state, external errors, and other unexpected issues.</item>
            </list>
            </remarks>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager.UpdateTitle">
            <summary> 
            Takes the project name and displays it on the top left corner
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.ProjectInfoManager">
            <summary>
            Class managing the extraction of physical information of the project : building, rooms,...
            UNUSED CLASS AT THE TIME OF THE BETA
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectInfoManager.#ctor(KNX_Virtual_Integrator.Model.Implementations.NamespaceResolver)">
            <summary>
            Class managing the extraction of physical information of the project : building, rooms,...
            UNUSED CLASS AT THE TIME OF THE BETA
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ProjectInfoManager.ExtractLocationInfo(System.Xml.Linq.XDocument)">
             <summary>
             Extracts location information from a specified XML document.
            
             This method processes the XML document to extract information about spaces categorized as
             "Room" or "Corridor". For each such space, it retrieves various hierarchical details including
             the names of the floor, building part, building, and distribution board associated with the space.
             The hierarchical relationships are determined by traversing ancestor and descendant nodes in the XML structure.
            
             The XML structure is expected to use namespaces, which are resolved using `namespaceResolver.GlobalKnxNamespace`.
             For each space element, the method extracts the following information:
             - RoomName: The name of the room or corridor.
             - FloorName: The name of the ancestor element of type "Floor".
             - BuildingPartName: The name of the ancestor element of type "BuildingPart".
             - BuildingName: The name of the ancestor element of type "Building".
             - DistributionBoardName: The name of the descendant element of type "DistributionBoard".
            
             The extracted information is returned as a list of anonymous objects, each containing the aforementioned details.
            
             </summary>
             <param name="zeroXmlFile">The XML document to extract information from.</param>
             <returns>A list of anonymous objects representing the extracted location information, where each object
             contains the names of the room, floor, building part, building, and distribution board.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.SliderClickHandler">
            <summary>
            Class handling the manipulation of the slider in the <see cref="T:KNX_Virtual_Integrator.View.Windows.SettingsWindow"/>.
            </summary>
            <param name="logger">To log errors and notable events.</param>
            <param name="parentFinder">To find the visual parent of the current object</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.SliderClickHandler.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger,KNX_Virtual_Integrator.Model.Implementations.ParentFinder)">
            <summary>
            Class handling the manipulation of the slider in the <see cref="T:KNX_Virtual_Integrator.View.Windows.SettingsWindow"/>.
            </summary>
            <param name="logger">To log errors and notable events.</param>
            <param name="parentFinder">To find the visual parent of the current object</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.SliderClickHandler.OnSliderClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click event of a slider's RepeatButton, updating the slider's value based on the click position.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.SliderClickHandler.SliderMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the event when the left mouse button is pressed down on the slider.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.SliderClickHandler.SliderMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the event when the left mouse button is released on the slider.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.SliderClickHandler.SliderMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the event when the mouse is moved over the slider while dragging.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse movement event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.SliderClickHandler.UpdateSliderValue(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Updates the slider's value based on the current mouse position.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse movement event.</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.StringManagement">
            <summary>
            Class handling the comparison of strings
            </summary>
            <param name="groupAddressProcessor">To process the strings before comparison</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.StringManagement.#ctor(KNX_Virtual_Integrator.Model.Implementations.GroupAddressProcessor)">
            <summary>
            Class handling the comparison of strings
            </summary>
            <param name="groupAddressProcessor">To process the strings before comparison</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.StringManagement.CalculateSimilarity(System.String,System.String)">
             <summary>
             Calculates the similarity between two strings using a similarity ratio.
            
             This method calculates the similarity ratio between two strings. The similarity ratio is
             a measure of how closely the two strings match, ranging from 0 to 1. A ratio of 1 means
             the strings are identical, while a ratio of 0 means they have no similarity.
            
             <param name="str1">The first string to compare.</param>
             <param name="str2">The second string to compare.</param>
             <returns>A similarity ratio between 0 and 1.</returns>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.StringManagement.LevenshteinDistance(System.String,System.String)">
             <summary>
             Computes the Levenshtein distance between two strings.
            
             The Levenshtein distance is a measure of the difference between two sequences. It is defined
             as the minimum number of single-character edits (insertions, deletions, or substitutions)
             required to change one string into the other.
            
             <param name="str1">The first string.</param>
             <param name="str2">The second string.</param>
             <returns>The Levenshtein distance between the two strings.</returns>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.StringManagement.AreNamesSimilar(System.String,System.String)">
            <summary>
            Compare two names based on the similarity of their first three words
            and exact match of the remaining words.
            </summary>
            <param name="name1">The first name to compare.</param>
            <param name="name2">The second name to compare.</param>
            <returns>True if the names are similar based on the criteria; otherwise, false.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.SystemSettingsDetector">
            <summary>
            Defines methods for detecting system settings related to Windows, such as theme and language.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.SystemSettingsDetector.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger)">
            <summary>
            Defines methods for detecting system settings related to Windows, such as theme and language.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.SystemSettingsDetector.DetectWindowsTheme">
            <summary>
            Detects the current Windows theme (light or dark).
            Attempts to read the theme setting from the Windows registry.
            Returns true if the theme is light, false if it is dark.
            If an error occurs or the registry value is not found, defaults to true (light theme).
            </summary>
            <returns>
            A boolean value indicating whether the Windows theme is light (true) or dark (false).
            </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.SystemSettingsDetector.DetectWindowsLanguage">
            <summary>
            Detects the current Windows language.
            If the language is supported by the application, it returns the corresponding language code.
            Otherwise, it returns an empty string.
            </summary>
            <returns>
            A string representing the Windows language code if supported; otherwise, an empty string.
            </returns>
            <remarks>
            This method reads the "LocaleName" value from the Windows registry under "Control Panel\International".
            It extracts the language code from this value and checks if it is in the set of valid language codes.
            If an error occurs during the registry access or if the language code is not supported, an empty string is returned.
            </remarks>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.SystemSettingsDetector.DetectWindowsScale">
            <summary>
            Detects the current Windows scale (100%,125%,...).
            Attempts to read the scale setting from the Windows registry.
            Returns the value : 100% returns 100.
            If an error occurs or the registry value is not found, defaults to 100% .
            </summary>
            <returns>
            An integer value indicating the System scale.
            </returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Implementations.ZipArchiveManager">
            <summary>
            Defines methods for creating and managing ZIP archives.
            </summary>
            <param name="logger">to log errors and process event</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ZipArchiveManager.#ctor(KNX_Virtual_Integrator.Model.Interfaces.ILogger)">
            <summary>
            Defines methods for creating and managing ZIP archives.
            </summary>
            <param name="logger">to log errors and process event</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ZipArchiveManager.CreateZipArchive(System.String,System.String[])">
            <summary>
            Creates a ZIP archive at the specified path, adding files and/or directories to it.
            If the specified path is a directory, all files and subdirectories within it are included in the archive.
            If the path is a file, only that file is added to the archive.
            If the ZIP file already exists, it will be overwritten.
            </summary>
            <param name="zipFilePath">The path where the ZIP archive will be created.</param>
            <param name="paths">An array of file and/or directory paths to include in the archive.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Implementations.ZipArchiveManager.AddDirectoryToArchive(System.IO.Compression.ZipArchive,System.String,System.String)">
            <summary>
            Recursively adds all files and subdirectories from the specified directory to the ZIP archive.
            Only the contents of the directory are included in the archive, not the directory itself.
            </summary>
            <param name="archive">The ZIP archive to which files and subdirectories will be added.</param>
            <param name="directoryPath">The path of the directory whose contents will be added to the archive.</param>
            <param name="entryName">The relative path within the ZIP archive where the contents of the directory will be placed.</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IAnalyze">
            <summary>
            Class used to analyze the knx installation according to a list of functional models.
            The models each have a list of Element, which have a list of commands and expected results.
            The results are thus listed as a list of (models)lists of (elements)lists of (commands)lists of (expected results)<see cref="T:KNX_Virtual_Integrator.Model.Implementations.ResultType"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IAnalyze.Results">
            <summary>
            Table of results sorted by Tests, in TestedElements, in functionalModels
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IAnalyze.TestAll(System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Int32,System.Int32)">
            <summary>
            Tests all the functional models of a list and updates the table of results
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IApplicationFileManager">
            <summary>
                Provides an interface for managing application files, including log file management, 
                archiving, and configuration settings.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IApplicationFileManager.EnsureLogDirectoryExists">
            <summary>
            Ensures that the log directory exists by creating it if it does not already exist.
            <para>
            If the directory cannot be created due to an exception, the application will be terminated with an error message.
            </para>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IApplicationFileManager.ArchiveLogs">
            <summary>
            Archives the log files in the log directory by compressing them into a ZIP archive when the number of log files exceeds 50.
            <para>
            If there are more than 50 log files, the method will create a new ZIP archive containing all log files, excluding the current log file.
            If there are already 10 or more existing archives, it will delete the oldest ones before creating a new archive.
            This ensures that only the log files from the last 50 application runs are retained.
            </para>
            <para>
            If there are fewer than 50 log files, no archiving will be performed.
            </para>
            <para>
            If an error occurs during the process, it logs the error message to the console and log file.
            </para>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IApplicationFileManager.DeleteAllExceptLogsAndResources">
            <summary>
            Deletes all directories in the application directory except for those named 'logs' and 'resources'.
            <para>
            This method iterates through all subdirectories in the base directory and deletes them, excluding the directories 'logs' and 'resources'.
            This helps in cleaning up directories from previous sessions, retaining only the specified directories for future use.
            </para>
            <para>
            In case of an error during the deletion, such as unauthorized access or I/O errors, the method logs the error message to the console and continues processing other directories.
            </para>
            <para>
            The method logs the path of each successfully deleted directory to the application log for tracking purposes.
            </para>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IApplicationFileManager.EnsureSettingsFileExists(System.String)">
             <summary>
             Ensures a configuration file exists at the specified path. If not, it creates the file and sets defaults 
             based on the system theme and language. Handles exceptions such as unauthorized access, invalid paths, 
             and I/O errors, displaying an error message and closing the application if an issue arises.
            
             <param name="settingsPath">The path to the configuration file.</param>
             </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings">
            <summary>
            Defines the interface for application settings management.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings.EnableLightTheme">
            <summary>
            Gets or sets a value indicating whether the light theme is enabled.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings.AppLang">
            <summary>
            Gets or sets the language used by the application.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings.AppScaleFactor">
            <summary>
            Gets or sets the scale factor of the application interface.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings.Save">
            <summary>
            Saves the current application settings.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection">
            <summary>
            Interface pour gérer la connexion au bus KNX.
            Fournit des propriétés et des méthodes pour se connecter, se déconnecter, découvrir les interfaces disponibles et gérer les états de connexion.
            Cette interface implémente également <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> pour notifier les changements de propriété.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.DiscoveredInterfaces">
            <summary>
                Observable collection of the discovered bus interfaces for the current connection type.
                It contains instances of <see cref="T:KNX_Virtual_Integrator.ViewModel.ConnectionInterfaceViewModel"/> of the discovered interfaces
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.SelectedInterface">
            <summary>
               Currently selected bus interface. It is automatically updated and linked with the UI.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.IsBusy">
            <summary>
                Indicate whether there is an ongoing activity (like a connection).
                Used to deactivate the UI during the activity.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.IsConnected">
            <summary>
                Indicates whether the bus is connected or not. It is linked with the UI.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.ConnectionState">
            <summary>
                Current connection state (i.e. : "Connected" ou "Disconnected"). Automatically updated
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.CurrentInterface">
            <summary>
                Current connection interface
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.NatAddress">
            <summary>
                IP address of the distant router to allow NAT connection
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.NatAccess">
            <summary>
                Property that indicates whether we use NAT to access the interface.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.InterfaceAddress">
            <summary>
                Individual Address for the given IP Secure interface
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.KeysFilePassword">
            <summary>
                Password that allows access to the file that holds the knxkeys. See <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.KeysPath"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.KeysPath">
            <summary>
                 The path to the file that holds the keys for the IP secure connection
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.SelectedConnectionType">
            <summary>
                Connection Type chosen by the user (IP, IP NAT, USB). Its changes are shared with the user interface
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.ConnectionErrorMessage">
            <summary>
            Property that possesses the error message to be printed to the user interface.
                It is collected through <see cref="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.CheckError(System.Exception)"/>.
                Different cases : 
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.OnSelectedConnectionTypeChanged">
            <summary>
                Asynchronous method called when then <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.SelectedConnectionType"/> changes.
                It tries to discover new interfaces with <see cref="M:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.DiscoverInterfacesAsync"/>.
                If there is an error, it catches it and prints it.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.ConnectBusAsync">
            <summary>
                Establishes a connection to the Knx Bus asynchronously
                It first verifies whether there is an ongoing operation. If not, it proceeds with the connection.
                When it succeeds, it updates the connection state and its subscribers.
                When it fails, it prints an error message.
            </summary>
            <returns>A task representing the completion to the connection.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.DisconnectBusAsync">
            <summary>
                Asynchronously disconnects from the KNX Bus.
                It first verifies whether the bus is connected or if there is an ongoing operation.
                If not, it starts the disconnection. When it succeeds, it updates the interface and prints a log.
            </summary>
            <returns>Une tâche représentant l'opération de déconnexion asynchrone.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.DiscoverInterfacesAsync">
            <summary>
                Discover asynchronously the available interfaces according to the <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.SelectedConnectionType"/>.
                This method discovers USB and IP interfaces and adds them to <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.DiscoveredInterfaces"/>.
                The results are updated to the user interface.
            </summary>
            <returns>A task representing the completion of the method</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IBusConnection.ValidateIPv4(System.String)">
            <summary>
                Used for error handling in the case of NAT.
                Checks if given IP address is in fact a correctly written IPv4 address
            </summary>
            <param name="ipString"> The IP address to check.</param>
            <returns> Returns true if the address has the form of an IPv4 address</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IDebugArchiveGenerator">
            <summary>
            Interface for generating debug archives.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IDebugArchiveGenerator.CreateDebugArchive(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a debug archive by collecting all debug-related files, including optional system and hardware information,
            imported projects, and a list of removed group addresses. The archive is then saved as a ZIP file.
            </summary>
            <param name="includeOsInfo">Specifies whether to include operating system information in the archive.</param>
            <param name="includeHardwareInfo">Specifies whether to include hardware information in the archive.</param>
            <param name="includeImportedProjects">Specifies whether to include imported projects in the archive.</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IFileFinder">
            <summary>
            Defines the contract for file finding operations.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFileFinder.FindFile(System.String,System.String)">
            <summary>
            Asynchronously searches for a specific file within a given directory and its subdirectories.
            </summary>
            <param name="rootPath">The root directory path where the search begins.</param>
            <param name="fileNameToSearch">The name of the file to find.</param>
            <returns>Returns the full path of the file if found; otherwise, returns an empty string.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFileFinder.FindZeroXml(System.String)">
            <summary>
            Asynchronously searches for the '0.xml' file in the exported KNX project directory.
            </summary>
            <param name="rootPath">The root directory path where the search begins.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IFileLoader">
            <summary>
            Defines the contract for file loading operations.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFileLoader.LoadXmlDocument(System.String)">
            <summary>
            Loads an XML document from a specified path.
            </summary>
            <param name="path">The path to the XML document to load.</param>
            <returns>Returns an XDocument if the file is successfully loaded; otherwise, returns null.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary">
             <summary>
             Interface for managing a dictionary of functional models (FunctionalModel).
            
             Provides methods to add, remove, retrieve, and update models in the dictionary.
             Each model is identified by a unique key (int). This interface enables centralized 
             management of functional models, allowing standardized operations on the dictionary.
             
             - AddFunctionalModel: Adds a functional model to the dictionary.
             - RemoveFunctionalModel: Removes a functional model using its key.
             - GetAllModels: Retrieves all functional models from the dictionary.
             </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.FunctionalModels">
            <summary>
            Gets or sets the list of models.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.AddKeyword(System.Int32,System.String)">
            <summary>
            Adds a keyword to the model at an index in the dictionary
            </summary>
            <param name="index">the index in the dictionary</param>
            <param name="word">the keyword</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.AddFunctionalModel(KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure,System.Boolean)">
            <summary>
            Adds a model to the dictionary
            </summary>
            <param name="functionalModel">the structure of the model</param>
            <param name="imported">if the model is imported</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.AddFunctionalModel(KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Adds a model to the dictionary
            </summary>
            <param name="functionalModel">the structure of the model</param>
            <param name="imported">if the model is imported</param>
            <param name="keywords">the keywords of the model</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.RemoveFunctionalModel(System.Int32)">
            <summary>
            Removes a model at a certain index in the dictionary
            </summary>
            <param name="index">the index of the model</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.GetAllModels">
            <summary>
            Gets all the models of the dictionary.
            </summary>
            <returns>the list of models</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.ExportDictionary(System.String)">
            <summary>
            Creates an XML file representing the dictionary.
            </summary>
            <param name="path">Path where the XML has to be exported </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.ExportDictionary(System.Xml.XmlDocument)">
            <summary>
            Exports the dictionary to an XmlElement 
            </summary>
            <param name="doc">The document to which should be exported the dictionary</param>
            <returns>The created document</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.ImportDictionary(System.String)">
            <summary>
            Imports a functional model dictionary from a path.
            </summary>
            <param name="path">Path of the dictionary</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.ImportDictionary(System.Xml.XmlNodeList)">
            <summary>
            Imports a functional model dictionary
            </summary> 
            <param name="xnList">the list from which to import the dictionary</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.HasSameStructure(KNX_Virtual_Integrator.Model.Entities.FunctionalModel)">
            <summary>
            Checks if a Functional Model has the same structure as the ones in the dictionary
            </summary>
            <param name="functionalModel">Structure to find in the dictionary</param>
            <returns>Index of the corresponding structure, or null if not found</returns>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.PropertyChanged">
            <summary>
            The event that occurs when the Dictionary changes. 
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelDictionary.CheckName(System.String)">
            <summary>
            Checks the index of a model with a certain name
            </summary>
            <param name="name">the name of the model</param>
            <returns>the index of the model if found; -1 otherwise.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList">
             <summary>
             Interface for managing a list of functional models (FunctionalModel).
            
             Provides methods to add, remove, retrieve, and update models in the list.
             Each model is identified by a unique key (int). This interface enables centralized 
             management of functional models, allowing standardized operations on the dictionary.
             
             - AddFunctionalModel: Adds a functional model to the dictionary.
             - RemoveFunctionalModel: Removes a functional model using its key.
             - GetAllModels: Retrieves all functional models from the dictionary.
             </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.FunctionalModels">
            <summary>
            The list structure of functional models.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.FunctionalModelDictionary">
            <summary>
            The dictionary of models and structures
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ExportDictionary(System.String)">
            <summary>
            Creates an XML file representing the dictionary.
            </summary>
            <param name="path">Path where the XML has to be exported </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.GetAllModels">
            <summary>>
            Method to get all the models in the dictionary.
            </summary>
            <returns>Returns a list containing all the functional models. </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.AddToDictionary(KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure,System.Boolean)">
            <summary>
            Adds a personalized model to the dictionary of models.
            </summary>
            <param name="model">The model to add to the dictionary</param>
            <param name="imported">Boolean to check if the functionalModelStructure to add is created manually or by the application during importation</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.DeleteFromDictionary(System.Int32)">
            <summary>
            Deletes a Structure from the dictionary .
            </summary>
            <param name="index">Index of the Structure to delete from in the dictionary. </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ResetInDictionary(System.Int32,KNX_Virtual_Integrator.Model.Entities.FunctionalModelStructure)">
            <summary>
            Resets the saved structure by clearing the dictionary then putting back in the structure at the index.
            </summary>
            <param name="index">The index at which the structure was saved (and to save)</param>
            <param name="savedStructure">the structure to be saved</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.AddToList(System.Int32)">
            <summary>
            Copies a functional model from the dictionary to the list.
            </summary>
            <param name="index">Index in the dictionary of the Functional Model to copy in the list</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.AddToList(System.Int32,KNX_Virtual_Integrator.Model.Entities.FunctionalModel,System.Boolean)">
            <summary>
            Copies a functional model to the list.
            </summary>
            <param name="functionalModel">FunctionalModel to add</param>
            <param name="index"> Index of the structure</param>
            <param name="copy"> boolean indicating whether the model is a copy or not</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.DeleteFromList(System.Int32,System.Int32)">
            <summary>
            Deletes a functional model in the list at the desired index.
            </summary>
            <param name="indexOfStructure">Index of the structure of the Functional Model to delete in the list</param>
            <param name="indexOfModel">Index of the Functional Model to delete in the list</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ExportDictionary(System.Xml.XmlDocument)">
            <summary>
            Creates an XMLElement representing the dictionary.
            </summary>
            <param name="doc">The document in which the element is created.</param>
            <returns>The created XmlElement</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ImportDictionary(System.String)">
            <summary>
            Imports an XML file representing the dictionary.
            </summary>
            <param name="path">Path of the xml. </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ImportDictionary(System.Xml.XmlNodeList)">
            <summary>
            Imports a functional model dictionary after clearing the list of models.
            </summary>
            <param name="xnList">the list from which to import the dictionary</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ExportList(System.String)">
            <summary>
            Creates an XML file representing the list of list.
            </summary>
            <param name="path">Path where the XML has to be exported </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ExportList(System.Xml.XmlDocument)">
            <summary>
            Exports the list of models in each structure from an XmlDocument
            </summary>
            <param name="doc">The XmlDocument in which is created the XmlElement.</param>
            <returns>The created XmlElement</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ImportList(System.String)">
            <summary>
            Imports the structure list from a file
            </summary>
            <param name="path">the path of the file</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ImportList(System.Xml.XmlNodeList)">
            <summary>
            Imports the structure list from an XmlNodeList
            </summary>
            <param name="xnList">The XmlNodeList to import from</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ExportListAndDictionary(System.String,System.String)">
            <summary>
            see <see cref="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ExportList(System.String)"/> and <see cref="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ExportDictionary(System.String)"/>
            </summary>
            <param name="path">Path of the file where everything has to be exported to.</param>
            <param name="projectName">Name of the imported project or file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ExportListAndDictionary(System.String,System.String,System.Xml.Linq.XDocument)">
            <summary>
            see <see cref="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ExportList(System.String)"/> and <see cref="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ExportDictionary(System.String)"/>
            </summary>
            <param name="path">Path of the file where everything has to be exported to.</param>
            <param name="projectName">Name of the imported project or file.</param>
            <param name="groupAddressFile">The imported project or file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ImportListAndDictionary(System.String)">
            <summary>
            see <see cref="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ImportList(System.String)"/> and <see cref="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ImportDictionary(System.String)"/>.
            </summary>
            <param name="path">the path of the file to import from.</param>
            <returns> The name of the importef file or project. </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ImportListAndDictionaryWithDoc(System.String)">
            <summary>
            see <see cref="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ImportList(System.String)"/> and <see cref="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ImportDictionary(System.String)"/>.
            </summary>
            <param name="path">the path of the file to import from.</param>
            <returns> The name of the imported file or project and the file itself. </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ResetCount(System.Int32)">
            <summary>
            Resets the count of models in a structure
            </summary>
            <param name="index">the structure index</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ReinitializeNbModels(System.Int32)">
            <summary>
            see <see cref="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.ResetCount(System.Int32)"/>.
            </summary>
            <param name="index">The index of the structure.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.AddNewEmptyStruct">
            <summary>
            Adds a new empty structure. <seealso cref="P:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.FunctionalModels"/> <seealso cref="F:KNX_Virtual_Integrator.Model.Implementations.FunctionalModelList._nbModelsCreated"/>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.AddNewCount">
            <summary>
            Creates a new counter associated to a new list in the list of lists
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList.DuplicateModel(System.Collections.Generic.List{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Int32)">
            <summary>
            Duplicates the model of a given index in a list
            </summary>
            <param name="models">List containing the model to be copied, and in which the copy will be</param>
            <param name="index">Index of the model to copy</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressManager">
            <summary>
            Defines methods for managing group addresses extracted from XML files.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressManager.Prefixes">
            <summary>
            Group address names prefixes. It is initialized for command
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressManager.GroupAddressStructure">
            <summary>
            The structure of the Group Addresses : 2 or 3 levels
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressManager.ExtractGroupAddress(KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList)">
             <summary>
             Extracts group address information from a specified XML file.
            
             Determines the file path to use based on user input and whether a specific group address
             file is chosen or a default file is used. Processes the XML file to extract and group addresses
             from either a specific format or a standard format.
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressManager.ProcessZeroXmlFile(System.Xml.Linq.XDocument,KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList)">
             <summary>
             Processes an XML file in the Zero format to extract and group addresses.
            
             This method extracts device references and their links, processes group addresses, and 
             groups them based on device links and common names. Handles the creation and updating 
             of grouped addresses, avoiding name collisions by appending suffixes if necessary.
            
             <param name="groupAddressFile">The XML document containing group address data in Zero format.</param>
             <param name="functionalModelList">The list of functional models to fill</param>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressManager.ProcessStandardXmlFile(System.Xml.Linq.XDocument)">
             <summary>
             Processes an XML file in the standard format to extract and group addresses.
            
             This method processes group addresses from the XML file, normalizing the names by removing
             specific prefixes ("Ie" or "Cmd") and grouping addresses based on the remaining common names.
            
             <param name="groupAddressFile">The XML document containing group address data in standard format.</param>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressManager.NewProcessStandardXmlFile(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},KNX_Virtual_Integrator.Model.Interfaces.IFunctionalModelList,System.Boolean)">
            <summary>
            Processes a list of XElement obtained from a XDocument to get the group addresses and fill the functional models
            </summary>
            <param name="modelStructures"> The list containing all the Xelements with the gorup addresses. </param>
            <param name="functionalModelList"> The list where to put all the recognized models. </param>
            <param name="is0"> The boolean acknowledging if the document is a 0.xml (true) or a group address file (false) </param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressManager.DetermineGroupAddressStructure0Xml(System.Xml.Linq.XDocument)">
            <summary>
            Determines the level structure of group addresses in an 0 XML document to check for overlaps.
            
            This method examines an XML document containing group address ranges and specific group addresses.
            It helps in identifying whether the group addresses are organized into 2 levels or 3 levels by detecting if there are any overlapping addresses.
            
            If the addresses are detected to overlap, the method returns the value 3.
            If no overlaps are found, the method returns the value 2.
            
            <param name="doc">The XML document (XDocument) containing the group address ranges and specific group addresses.</param>
            <returns>An integer indicating the overlap status: 3 for detected overlap, 2 for no overlap.</returns>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressManager.DetermineGroupAddressStructureGroupAddressFile(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Determines the level structure of group addresses in an XML document to check for overlaps.
            
            This method examines an XML document containing group address ranges and specific group addresses.
            It helps in identifying whether the group addresses are organized into 2 levels or 3 levels by detecting if there are any overlapping addresses.
            
            If the addresses are detected to overlap, the method returns the value 3.
            If no overlaps are found, the method returns the value 2.
            
            <param name="modelStructures">The list of XElements containing the group address ranges and specific group addresses.</param>
            <returns>An integer indicating the overlap status: 3 for detected overlap, 2 for no overlap.</returns>
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressMerger">
            <summary>
            Interface for merging group address with those that have more than 80% similarity with the IeAddressSet.
            It finds and sort the ie with the cmd after finding the cmd.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressMerger.MergeSingleElementGroups(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Xml.Linq.XElement}},System.Collections.Generic.List{System.Xml.Linq.XElement})">
            <summary>
            Merges single-element groups in the grouped addresses dictionary with entries from the provided 
            IeAddressesSet if their names have a similarity of 80% or more.
            
            This method iterates over groups in the groupedAddresses dictionary that contain a single XElement 
            and attempts to find matching entries in the IeAddressesSet based on a similarity threshold of 80%. 
            If a similar entry is found, it is added to the corresponding group.
            
            <param name="groupedAddresses">The dictionary of grouped addresses that will be modified and potentially merged with elements from IeAddressesSet.</param>
            <param name="ieAddressesSet">A list of XElement entries that will be compared against single-element groups in groupedAddresses for potential merging.</param>
            <returns>Returns the modified dictionary of grouped addresses with merged entries.</returns>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressMerger.GetElementsBySimilarity(System.Xml.Linq.XElement,System.Collections.Generic.List{System.Xml.Linq.XElement})">
            <summary>
            Processes the name attribute of the provided 'cmdElement' XElement to extract a relevant search string, 
            and then finds and sorts elements from the 'ieAddressesSet' based on their similarity to this search string.
            
            This method performs the following steps:
            1. Extracts the value of the "Name" attribute from the 'cmdElement' XElement and assigns it to 'searchString'.
            2. Removes the prefix "Cmd" from the beginning of 'searchString', if present.
            3. Uses a regular expression to strip off any trailing numeric segments from 'searchString', 
               leaving only the core part of the name for comparison.
            4. Sorts the elements in 'ieAddressesSet' by their similarity to the cleaned 'searchString', 
               in descending order of similarity. The similarity is computed using a custom similarity function.
            
            <param name="cmdElement">The XElement representing the command from which the search string is derived.</param>
            <param name="ieAddressesSet">The collection of XElement entries to be compared against the search string.</param>
            <returns>Returns a list of elements from 'ieAddressesSet', sorted by their similarity to the cleaned 'searchString'.</returns>
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressProcessor">
            <summary>
            Manages the processing of group address names : normalize, according to the architecture and adding one more to the dictionary, but normalized.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressProcessor.AddToGroupedAddresses(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Xml.Linq.XElement}},System.Xml.Linq.XElement,System.String)">
             <summary>
             Adds a group address to the grouped addresses dictionary with a normalized common name.
            
             This method ensures that the group address is added to the list associated with the specified
             common name. If the common name does not already exist in the dictionary, it is created.
            
             <param name="groupedAddresses">The dictionary of grouped addresses where the group address will be added.</param>
             <param name="ga">The group address element to be added.</param>
             <param name="commonName">The common name used for grouping the address.</param>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressProcessor.NormalizeName(System.String)">
            <summary>
            Normalizes the name by removing specific prefixes.
            </summary>
            <param name="name">The name to normalize.</param>
            <returns>The normalized name.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressProcessor.FilterElements(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Xml.Linq.XElement}})">
            <summary>
            Filters a dictionary of XElement lists, retaining only those lists where all elements
            share the same first word in their "Name" attribute.
            
            This method processes each list in the dictionary that contains more than one XElement. 
            It checks if all elements in the list start with the same word (separated by spaces or underscores) 
            in their "Name" attribute. If they do, the list is added to the resulting dictionary.
            
            <param name="dictionary">A dictionary where the key is a string and the value is a list of XElement objects.</param>
            <returns>A dictionary containing only the lists of XElement objects where all elements have the same first word in their "Name" attribute.</returns>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressProcessor.DecodeAddress(System.String,System.Int32)">
            <summary>
            Decodes a string representing a numeric value into a formatted string based on the group address structure.
            
            This method takes a string representation of a numeric value and converts it into a formatted string. The format of the output string depends on the specified group address structure:
            
            - For a 3-level group address structure, the value is decoded into three components: "champ1/champ2/champ3".
            - For a 2-level group address structure, the value is decoded into two components: "champ1/champ2".
            
            The decoding is performed as follows:
            - For 3-level structure:
              - The third component (`champ3`) is extracted as the least significant 8 bits.
              - The second component (`champ2`) is extracted as the next 3 bits.
              - The first component (`champ1`) is extracted as the most significant 5 bits.
            - For 2-level structure:
              - The second component (`champ2`) is extracted as the least significant 11 bits.
              - The first component (`champ1`) is extracted as the next 5 bits.
            
            If the input string cannot be converted to an integer, or if the group address structure is not recognized, the method logs an error message and returns the original input string.
            
            <param name="valueString">The string representation of the numeric value to decode.</param>
            <param name="groupAddressStructure">An integer indicating the group address structure: 2 for 2-level and 3 for 3-level.</param>
            <returns>A formatted string representing the decoded value based on the group address structure. Returns the original string if conversion fails or if the structure is unrecognized.</returns>
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication">
            <summary>
            Represents the communication with the bus in terms of group addresses and values.
            Allows writing and reading information from the bus while checking its state.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.GroupAddress">
            <summary>
            Gets or sets the address with which the program will communicate with the bus.
            It specifies which Group Address will make use or read the <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.GroupValue"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.GroupValue">
            <summary>
            Gets the group value to send to the bus.
            It represents which state the object will be in.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.GroupValueWriteOnAsync">
            <summary>
            Dev method. Sends asynchronously the value "on" to a specified address.
            First verifies the bus state before sending the value.
            Logs an error if it fails. 
            </summary>
            <returns>A task representing the completion of the writing.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.GroupValueWriteOffAsync">
            <summary>
            Dev method. Sends asynchronously the value "off" to a specified address.
            First verifies the bus state before sending the value.
            Logs an error if it fails. 
            </summary>
            <returns>A task representing the completion of the writing.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.GroupValueWriteAsync(Knx.Falcon.GroupAddress,Knx.Falcon.GroupValue)">
            <summary>
            Sends asynchronously a value to a specified address.
            First verifies the bus state before sending the value.
            Logs an error if it fails.
            </summary>
            <param name="addr">The address at which the value is sent.</param>
            <param name="value">The value to send.</param>
            <returns>A task representing the completion of the writing.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.ConvertToGroupValue(System.UInt64,System.Byte[])">
            <summary>
             Converts a uLong value to a byte table to write on the bus
            </summary>
             <param name="toSend">The value to send.</param>
             <param name="groupValue">The table to fill before writing.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.MaGroupValueReadAsync(Knx.Falcon.GroupAddress)">
            <summary>
            Reads asynchronously values from a group address.
            Verifies the bus connection state before sending the request.
            uses a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to capture the read value.
            </summary>
            <param name="groupAddress">The group address at which the value should be read.</param>
            <returns>A task representing the completion of the task, containing the received messages.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.GroupValuesWithinTimerAsync(Knx.Falcon.GroupAddress,System.Int32)">
            <summary>
            Reads asynchronously values from a group address until the timer runs out.
            Verifies the bus connection state before sending the request.
            uses a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to capture the read value.
            </summary>
            <param name="groupAddress">The group address at which the value should be read.</param>
             <param name="timerDuration">Timer in ms under which the message should be received.</param>
            <returns>A task representing the completion of the task, containing the received messages..</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.GroupValuesTimerOrRecievedAWriteAsync(Knx.Falcon.GroupAddress,System.Int32)">
            <summary>
            Reads asynchronously values from a group address until a Write is received or the timer runs out.
            Verifies the bus connection state before sending the request.
            uses a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> to capture the read value.
            </summary>
            <param name="groupAddress">The group address at which the value should be read.</param>
             <param name="timerDuration">Timer in ms under which the message should be received.</param>
            <returns>A task representing the completion of the task, containing the received messages.</returns>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication.GroupEvents">
            <summary>
            Gets the collection of group events args.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.ILogger">
            <summary>
            Defines the contract for logging functionality.
            <para>
            The <see cref="T:KNX_Virtual_Integrator.Model.Interfaces.ILogger"/> interface provides methods for writing log messages to both the console and a log file.
            It supports writing messages with or without timestamps, and allows for both single-line and multi-line messages.
            </para>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ILogger.ConsoleAndLogWrite(System.String)">
            <summary>
            Writes a message to the application console and log file without appending a newline after the message.
            </summary>
            <param name="msg">The message to be written to the console and log file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ILogger.ConsoleAndLogWriteLine(System.String)">
            <summary>
            Writes a message to the application console and log file, including the current date and time, and appends a newline after the message.
            </summary>
            <param name="msg">The message to be written to the console and log file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ILogger.LogWrite(System.String)">
            <summary>
            Writes a message to the log file without appending a newline after the message.
            </summary>
            <param name="msg">The message to be written to the log file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ILogger.LogWriteLine(System.String)">
            <summary>
            Writes a message to the log file, including the current date and time, and appends a newline after the message.
            </summary>
            <param name="msg">The message to be written to the log file.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ILogger.CloseLogWriter">
            <summary>
            Closes the log writer and releases any resources associated with it.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.INamespaceResolver">
            <summary>
            Manages the KNX namespaces from a Xml file.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.INamespaceResolver.SetNamespaceFromXml(System.String)">
             <summary>
             Sets the global KNX XML namespace from the specified XML file.
            
             This method loads the XML file located at <paramref name="filePath"/> and retrieves
             the namespace declaration from the root element. If a namespace is found, it updates the
             static field <c>_globalKnxNamespace</c> with the retrieved namespace. If the XML file cannot
             be loaded or an error occurs during processing, appropriate error messages are logged.
            
             <param name="filePath">The path to the XML file from which to extract the namespace.</param>
             </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IParentFinder">
            <summary>
            Interface defining a utility to find the parent of a specific type in the visual tree.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IParentFinder.FindParent``1(System.Windows.DependencyObject)">
            <summary>
            Finds the parent of a specified type in the visual tree.
            </summary>
            <typeparam name="T">The type of the parent to find.</typeparam>
            <param name="child">The starting child object from which to search up the visual tree.</param>
            <returns>The parent of type T, or null if no such parent is found.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IPdfDocumentCreator">
            <summary>
            Interface of the class handling the generation of the analysis report PDF
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IPdfDocumentCreator.LatestReportPath">
            <summary>
            Path to the latest PDF report generated
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IPdfDocumentCreator.CreatePdf(System.String,System.String,System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{KNX_Virtual_Integrator.Model.Implementations.ResultType}}}})">
            <summary>
            Creates a PDF document at the specified file path, with the given author name.
            The PDF is generated in A4 format without margins, and includes a header, project information,
            and a tree structure. The generated file path is stored as the latest report path.
            </summary>
            <param name="fileName">The file path where the PDF will be saved.</param>
            <param name="authorName">The name of the author to include in the project information section.</param>
            <param name="testedList"></param>
            <param name="testResults"></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IPdfDocumentCreator.OpenLatestReport">
            <summary>
            Opens the most recently generated PDF report using the default system application.
            The file path of the latest report is retrieved from the LatestReportPath variable.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IProjectFileManager">
            <summary>
            Interface for managing project files including extraction and handling operations.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IProjectFileManager.ProjectFolderPath">
            <summary>
            Gets the path to the exported project folder.
            </summary>
            <remarks>
            This property holds the file path of the project folder where the project files are exported.
            </remarks>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IProjectFileManager.ProjectName">
            <summary>
             Gets the name of the project the application is currently working on.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IProjectFileManager.ZeroXmlPath">
            <summary>
            Gets the path to the 0.xml file of the project.
            </summary>
            <remarks>
            This property holds the file path to the 0.xml file associated with the project.
            </remarks>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Interfaces.IProjectFileManager.GroupAddressFilePath">
            <summary>
            Gets the path to the exported of the group addresses file.
            </summary>
            <remarks>
            This property holds the file path  of the group addresses file
            </remarks>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IProjectFileManager.ExtractProjectFiles(System.String)">
            <summary>
            Extracts project files from the specified .knxproj file path.
            </summary>
            <param name="knxprojSourceFilePath">The path to the .knxproj file.</param>
            <returns>Returns <c>true</c> if the extraction was successful; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IProjectFileManager.ExtractGroupAddressFile(System.String)">
            <summary>
            Extracts the group addresses file at the specified path and place it into the designated export folder.
            </summary>
            <param name="groupAddressesSourceFilePath">The path to the group addresses file that will be extracted.</param>
            <returns>Returns <c>true</c> if the file is successfully extracted and the process was not cancelled; otherwise, returns <c>false</c>.</returns>
            <remarks>
            This method performs the following steps:
            <list type="number">
            <item>Normalizes the path of the group addresses file and handles potential path-related exceptions.</item>
            <item>Deletes any existing group addresses file to avoid conflicts.</item>
            <item>Copy the file to the right folder path and indicates successful extraction if no cancellation occurred.</item>
            </list>
            </remarks>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IProjectFileManager.SelectAnotherFile">
            <summary>
            Prompts the user to select a file path using an OpenFileDialog.
            </summary>
            <returns>Returns the selected file path as a string if a file is chosen; otherwise, returns an empty string.</returns>
            <remarks>
            This method:
            <list type="number">
            <item>Displays a file open dialog with predefined filters and settings.</item>
            <item>Returns the path of the selected file if the user confirms their choice.</item>
            <item>Handles potential exceptions, including invalid dialog state, external errors, and other unexpected issues.</item>
            </list>
            </remarks>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IProjectFileManager.UpdateTitle">
            <summary> 
            Takes the project name and displays it on the top left corner
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IProjectInfoManager">
            <summary>
            Interface of the class managing the extraction of physical information of the project : building, rooms,...
            UNUSED CLASS AT THE TIME OF THE BETA
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IProjectInfoManager.ExtractLocationInfo(System.Xml.Linq.XDocument)">
             <summary>
             Extracts location information from a specified XML document.
            
             This method processes the XML document to extract information about spaces categorized as
             "Room" or "Corridor". For each such space, it retrieves various hierarchical details including
             the names of the floor, building part, building, and distribution board associated with the space.
             The hierarchical relationships are determined by traversing ancestor and descendant nodes in the XML structure.
            
             The XML structure is expected to use namespaces, which are resolved using `namespaceResolver.GlobalKnxNamespace`.
             For each space element, the method extracts the following information:
             - RoomName: The name of the room or corridor.
             - FloorName: The name of the ancestor element of type "Floor".
             - BuildingPartName: The name of the ancestor element of type "BuildingPart".
             - BuildingName: The name of the ancestor element of type "Building".
             - DistributionBoardName: The name of the descendant element of type "DistributionBoard".
            
             The extracted information is returned as a list of anonymous objects, each containing the aforementioned details.
            
             </summary>
             <param name="zeroXmlFile">The XML document to extract information from.</param>
             <returns>A list of anonymous objects representing the extracted location information, where each object
             contains the names of the room, floor, building part, building, and distribution board.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.ISliderClickHandler">
            <summary>
            Interface of the class handling the manipulation of the slider in the <see cref="T:KNX_Virtual_Integrator.View.Windows.SettingsWindow"/>.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ISliderClickHandler.OnSliderClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click event of a slider's RepeatButton, updating the slider's value based on the click position.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ISliderClickHandler.SliderMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the event when the left mouse button is pressed down on the slider.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ISliderClickHandler.SliderMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the event when the left mouse button is released on the slider.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ISliderClickHandler.SliderMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the event when the mouse is moved over the slider while dragging.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse movement event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ISliderClickHandler.UpdateSliderValue(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Updates the slider's value based on the current mouse position.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse movement event.</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IStringManagement">
            <summary>
            Interface of the class handling the comparison of strings
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IStringManagement.CalculateSimilarity(System.String,System.String)">
             <summary>
             Calculates the similarity between two strings using a similarity ratio.
            
             This method calculates the similarity ratio between two strings. The similarity ratio is
             a measure of how closely the two strings match, ranging from 0 to 1. A ratio of 1 means
             the strings are identical, while a ratio of 0 means they have no similarity.
            
             <param name="str1">The first string to compare.</param>
             <param name="str2">The second string to compare.</param>
             <returns>A similarity ratio between 0 and 1.</returns>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IStringManagement.LevenshteinDistance(System.String,System.String)">
             <summary>
             Computes the Levenshtein distance between two strings.
            
             The Levenshtein distance is a measure of the difference between two sequences. It is defined
             as the minimum number of single-character edits (insertions, deletions, or substitutions)
             required to change one string into the other.
            
             <param name="str1">The first string.</param>
             <param name="str2">The second string.</param>
             <returns>The Levenshtein distance between the two strings.</returns>
             </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IStringManagement.AreNamesSimilar(System.String,System.String)">
            <summary>
            Compare two names based on the similarity of their first three words
            and exact match of the remaining words.
            </summary>
            <param name="name1">The first name to compare.</param>
            <param name="name2">The second name to compare.</param>
            <returns>True if the names are similar based on the criteria; otherwise, false.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.ISystemSettingsDetector">
            <summary>
            Defines methods for detecting system settings related to Windows, such as theme and language.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ISystemSettingsDetector.DetectWindowsTheme">
            <summary>
            Detects the current Windows theme (light or dark).
            Attempts to read the theme setting from the Windows registry.
            Returns true if the theme is light, false if it is dark.
            If an error occurs or the registry value is not found, defaults to true (light theme).
            </summary>
            <returns>
            A boolean value indicating whether the Windows theme is light (true) or dark (false).
            </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ISystemSettingsDetector.DetectWindowsLanguage">
            <summary>
            Detects the current Windows language.
            If the language is supported by the application, it returns the corresponding language code.
            Otherwise, it returns an empty string.
            </summary>
            <returns>
            A string representing the Windows language code if supported; otherwise, an empty string.
            </returns>
            <remarks>
            This method reads the "LocaleName" value from the Windows registry under "Control Panel\International".
            It extracts the language code from this value and checks if it is in the set of valid language codes.
            If an error occurs during the registry access or if the language code is not supported, an empty string is returned.
            </remarks>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.ISystemSettingsDetector.DetectWindowsScale">
            <summary>
            Detects the current Windows scale (100%,125%,...).
            Attempts to read the scale setting from the Windows registry.
            Returns the value : 100% returns 100.
            If an error occurs or the registry value is not found, defaults to 100% .
            </summary>
            <returns>
            An integer value indicating the System scale.
            </returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Interfaces.IZipArchiveManager">
            <summary>
            Defines methods for creating and managing ZIP archives.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IZipArchiveManager.CreateZipArchive(System.String,System.String[])">
            <summary>
            Creates a ZIP archive at the specified path, adding files and/or directories to it.
            If the specified path is a directory, all files and subdirectories within it are included in the archive.
            If the path is a file, only that file is added to the archive.
            If the ZIP file already exists, it will be overwritten.
            </summary>
            <param name="zipFilePath">The path where the ZIP archive will be created.</param>
            <param name="paths">An array of file and/or directory paths to include in the archive.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Interfaces.IZipArchiveManager.AddDirectoryToArchive(System.IO.Compression.ZipArchive,System.String,System.String)">
            <summary>
            Recursively adds all files and subdirectories from the specified directory to the ZIP archive.
            Only the contents of the directory are included in the archive, not the directory itself.
            </summary>
            <param name="archive">The ZIP archive to which files and subdirectories will be added.</param>
            <param name="directoryPath">The path of the directory whose contents will be added to the archive.</param>
            <param name="entryName">The relative path within the ZIP archive where the contents of the directory will be placed.</param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.ModelManager">
            <summary>
                Manager which holds every instance of the model classes that need to only be accessed by the ViewModel. The instances can be accessed but not set.
            </summary>
            <param name="fileFinder"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.FileFinder"/>, to import files</param>
            <param name="projectFileManager"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager"/>, to manage the project</param>
            <param name="logger"><see cref="P:KNX_Virtual_Integrator.Model.ModelManager.Logger"/>, to log and print information</param>
            <param name="groupAddressManager"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager"/>, to manage group addresses</param>
            <param name="debugArchiveGenerator"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.DebugArchiveGenerator"/>, to create bug reports</param>
            <param name="applicationFileManager"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.ApplicationFileManager"/>, to handle files</param>
            <param name="busConnection"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.BusConnection"/>, to handle the KNX Bus</param>
            <param name="groupCommunication"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication"/>, to communicate with the bus</param>
            <param name="appSettings"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings"/>, to manage the settings</param>
            <param name="parentFinder"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.ParentFinder"/>, to organize group addresses</param>
            <param name="settingsSliderClickHandler"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.SliderClickHandler"/>, to handle sliders</param>
            <param name="pdfDocumentCreator"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator"/>, to create Test report PDF</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.ModelManager.#ctor(KNX_Virtual_Integrator.Model.Interfaces.IFileFinder,KNX_Virtual_Integrator.Model.Interfaces.IProjectFileManager,KNX_Virtual_Integrator.Model.Interfaces.ILogger,KNX_Virtual_Integrator.Model.Interfaces.IGroupAddressManager,KNX_Virtual_Integrator.Model.Interfaces.IDebugArchiveGenerator,KNX_Virtual_Integrator.Model.Interfaces.IApplicationFileManager,KNX_Virtual_Integrator.Model.Interfaces.IBusConnection,KNX_Virtual_Integrator.Model.Interfaces.IGroupCommunication,KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings,KNX_Virtual_Integrator.Model.Interfaces.IParentFinder,KNX_Virtual_Integrator.Model.Interfaces.ISliderClickHandler,KNX_Virtual_Integrator.Model.Interfaces.IPdfDocumentCreator)">
            <summary>
                Manager which holds every instance of the model classes that need to only be accessed by the ViewModel. The instances can be accessed but not set.
            </summary>
            <param name="fileFinder"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.FileFinder"/>, to import files</param>
            <param name="projectFileManager"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.ProjectFileManager"/>, to manage the project</param>
            <param name="logger"><see cref="P:KNX_Virtual_Integrator.Model.ModelManager.Logger"/>, to log and print information</param>
            <param name="groupAddressManager"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.GroupAddressManager"/>, to manage group addresses</param>
            <param name="debugArchiveGenerator"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.DebugArchiveGenerator"/>, to create bug reports</param>
            <param name="applicationFileManager"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.ApplicationFileManager"/>, to handle files</param>
            <param name="busConnection"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.BusConnection"/>, to handle the KNX Bus</param>
            <param name="groupCommunication"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.GroupCommunication"/>, to communicate with the bus</param>
            <param name="appSettings"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings"/>, to manage the settings</param>
            <param name="parentFinder"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.ParentFinder"/>, to organize group addresses</param>
            <param name="settingsSliderClickHandler"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.SliderClickHandler"/>, to handle sliders</param>
            <param name="pdfDocumentCreator"><see cref="T:KNX_Virtual_Integrator.Model.Implementations.PdfDocumentCreator"/>, to create Test report PDF</param>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.FileFinder">
            <summary> Class used to handle importing files  </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.ProjectFileManager">
            <summary> Class used to extract information from the imperted files </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.Logger">
            <summary> Class used to print out information and to log it in a file </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.GroupAddressManager">
            <summary> Class handling any processing of group addresses </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.DebugArchiveGenerator">
            <summary> Class handling the generation of the debug file </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.ApplicationFileManager">
            <summary> Class handling the logs and archives of the app </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.BusConnection">
            <summary> Class handling the connection to the bus </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.GroupCommunication">
            <summary> Class handling any connection to the bus after connection </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.AppSettings">
            <summary> Class handling the logs and archives of the app </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.ParentFinder">
            <summary> Class handling the search of related elements of the UI </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.SettingsSliderClickHandler">
            <summary> Class handling the slider of the <see cref="T:KNX_Virtual_Integrator.View.Windows.SettingsWindow"/></summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.ModelManager.PdfDocumentCreator">
            <summary> Class handling the creation of the PDF analysis report </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper">
            <summary>
                Class wrapper of <see cref="T:Knx.Falcon.Sdk.KnxBus"/>. A Wrapper is used to reduce code dependency from the wrapped class
                (for tests or if you want to replace some functionalities).
                The Interface is the type of all variables <see cref="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection.Bus"/>,
                so that during multiple implementations can exist, especially during tests where we may
                not want to really communicate with the bus.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.IsNull">
            <summary>
                Property getter to check whether the bus is null or not
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.KnxBusSetter">
            <summary>
                Property setter, mostly created to set the KNX Bus to null 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.ConnectionState">
            <summary>
                Wrapper to get information about the current state of the connection
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.DiscoverIpDevicesAsync(System.Threading.CancellationToken)">
            <summary>
                Wrapper of KnxBus.<see cref="M:Knx.Falcon.Sdk.KnxBus.DiscoverIpDevicesAsync(System.Threading.CancellationToken)"/>. Discovers KNX/IP devices asynchronously
            </summary>
            <param name="cancellationToken">Can be used to cancel the operation.</param>
            <returns><see cref="T:Knx.Falcon.Discovery.IpDeviceDiscoveryResult"/>s of the detected devices</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.GetAttachedUsbDevices">
            <summary>
                Wrapper of KnxBus.<see cref="M:Knx.Falcon.Sdk.KnxBus.GetAttachedUsbDevices"/>. Gets the currently attached KNX USB devices
            </summary>
            <returns>The found KNX USB interfaces</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.NewKnxBusWrapper(Knx.Falcon.Configuration.ConnectorParameters)">
            <summary>
                New way to initialize a KNX Bus. It subscribes its wrapper event handlers to relay the real events 
            </summary>
            <param name="parameters"> The parameters used for the KnxBus constructor : <see cref="T:Knx.Falcon.Configuration.ConnectorParameters"/></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
                Wrapper method to <see cref="M:Knx.Falcon.Sdk.KnxBus.ConnectAsync(System.Threading.CancellationToken)"/>. Connects to the bus interface
            </summary>
            <param name="cancellationToken">Can be used to cancel the operation.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.DisposeAsync">
            <summary>
                Wrapper method to KnxBux.<see cref="M:Knx.Falcon.Sdk.KnxBus.DisposeAsync"/>. Releases
                the <see cref="T:Knx.Falcon.Sdk.KnxBus"/> object and frees all ressources asynchronously
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.WriteGroupValueAsync(Knx.Falcon.GroupAddress,Knx.Falcon.GroupValue,Knx.Falcon.MessagePriority,System.Threading.CancellationToken)">
            <summary>
                Wrapper of <see cref="M:Knx.Falcon.Sdk.KnxBus.WriteGroupValueAsync(Knx.Falcon.GroupAddress,Knx.Falcon.GroupValue,Knx.Falcon.MessagePriority,System.Threading.CancellationToken)"/>. Writes a group value to
                the bus with the specified priority
            </summary>
            <param name="groupAddress">The group address</param>
            <param name="value">The value to write</param>
            <param name="priority">The message priority to use</param>
            <param name="cancellationToken">Can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation.
                The result is true if the message was acknowledged positively,
                true if the message was acknowledged negatively.
                When sent on multiple RF modes, true is returned only if acknowledged positively on all modes.
            </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.RequestGroupValueAsync(Knx.Falcon.GroupAddress,Knx.Falcon.MessagePriority,System.Threading.CancellationToken)">
            <summary>
                Wrapper to <see cref="M:Knx.Falcon.Sdk.KnxBus.RequestGroupValueAsync(Knx.Falcon.GroupAddress,Knx.Falcon.MessagePriority,System.Threading.CancellationToken)"/>. Sends a group value read request
                to the bus with the specified priority without waiting for a response.
            </summary>
            <param name="groupAddress">The group address</param>
            <param name="priority">The message priority to use</param>
            <param name="cancellationToken">Can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation.
                The result is true if the message was acknowledged positively,
                true if the message was acknowledged negatively.
                When sent on multiple RF modes, true is returned only if acknowledged positively on all modes.
            </returns>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.ConnectionStateChanged">
            <summary>
                Wrapper event to relay the event <see cref="E:Knx.Falcon.Sdk.KnxBus.ConnectionStateChanged"/> to notify when
                <see cref="P:Knx.Falcon.Sdk.KnxBus.ConnectionState"/> has changed
            </summary>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.GroupMessageReceived">
            <summary>
                Wrapper event to relay the event <see cref="E:Knx.Falcon.Sdk.KnxBus.GroupMessageReceived"/> to notify when
                a group message was received from the bus
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.StateChangedInvoker(System.Object,System.EventArgs)">
            <summary>
                Method used to relay the event <see cref="E:Knx.Falcon.Sdk.KnxBus.ConnectionStateChanged"/> from the KNX Bus
                to the handlers subscribed to it
            </summary>
            <param name="sender">Who fires the event</param>
            <param name="args">The new state</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.IKnxBusWrapper.GroupMessageInvoker(System.Object,Knx.Falcon.GroupEventArgs)">
            <summary>
                Method used to relay the event <see cref="E:Knx.Falcon.Sdk.KnxBus.GroupMessageReceived"/> from the KNX Bus
                to the handlers subscribed to it    
            </summary>
            <param name="sender"> Who fires the event </param>
            <param name="args"> The new group message </param>
        </member>
        <member name="T:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper">
            <summary>
                Class wrapper of <see cref="T:Knx.Falcon.Sdk.KnxBus"/>. A Wrapper is used to reduce code dependency from the wrapped class
                (for tests or if you want to replace some functionalities).
                The Interface is the type of all variables <see cref="F:KNX_Virtual_Integrator.Model.Implementations.BusConnection.Bus"/>,
                so that during multiple implementations can exist, especially during tests where we may
                not want to really communicate with the bus.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper._knxBus">
            <summary>
                This is the real KNX Bus hidden in the backend of the wrapper
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.IsNull">
            <summary>
                Property getter to check whether the bus is null or not
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.KnxBusSetter">
            <summary>
                Property setter, mostly created to set the KNX Bus to null 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.ConnectionState">
            <summary>
                Wrapper to get information about the current state of the connection
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.DiscoverIpDevicesAsync(System.Threading.CancellationToken)">
            <summary>
                Wrapper of KnxBus.<see cref="M:Knx.Falcon.Sdk.KnxBus.DiscoverIpDevicesAsync(System.Threading.CancellationToken)"/>. Discovers KNX/IP devices asynchronously
            </summary>
            <param name="cancellationToken">Can be used to cancel the operation.</param>
            <returns><see cref="T:Knx.Falcon.Discovery.IpDeviceDiscoveryResult"/>s of the detected devices</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.GetAttachedUsbDevices">
            <summary>
                Wrapper of KnxBus.<see cref="M:Knx.Falcon.Sdk.KnxBus.GetAttachedUsbDevices"/>. Gets the currently attached KNX USB devices
            </summary>
            <returns>The found KNX USB interfaces</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.NewKnxBusWrapper(Knx.Falcon.Configuration.ConnectorParameters)">
            <summary>
                New way to initialize a KNX Bus. It subscribes its wrapper event handlers to relay the real events 
            </summary>
            <param name="parameters"> The parameters used for the KnxBus constructor : <see cref="T:Knx.Falcon.Configuration.ConnectorParameters"/></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
                Wrapper method to <see cref="M:Knx.Falcon.Sdk.KnxBus.ConnectAsync(System.Threading.CancellationToken)"/>. Connects to the bus interface
            </summary>
            <param name="cancellationToken">Can be used to cancel the operation.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.DisposeAsync">
            <summary>
                Wrapper method to KnxBux.<see cref="M:Knx.Falcon.Sdk.KnxBus.DisposeAsync"/>. Releases
                the <see cref="T:Knx.Falcon.Sdk.KnxBus"/> object and frees all ressources asynchronously
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.WriteGroupValueAsync(Knx.Falcon.GroupAddress,Knx.Falcon.GroupValue,Knx.Falcon.MessagePriority,System.Threading.CancellationToken)">
            <summary>
                Wrapper of <see cref="M:Knx.Falcon.Sdk.KnxBus.WriteGroupValueAsync(Knx.Falcon.GroupAddress,Knx.Falcon.GroupValue,Knx.Falcon.MessagePriority,System.Threading.CancellationToken)"/>. Writes a group value to
                the bus with the specified priority
            </summary>
            <param name="groupAddress">The group address</param>
            <param name="value">The value to write</param>
            <param name="priority">The message priority to use</param>
            <param name="cancellationToken">Can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation.
                The result is true if the message was acknowledged positively,
                true if the message was acknowledged negatively.
                When sent on multiple RF modes, true is returned only if acknowledged positively on all modes.
            </returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.RequestGroupValueAsync(Knx.Falcon.GroupAddress,Knx.Falcon.MessagePriority,System.Threading.CancellationToken)">
            <summary>
                Wrapper to <see cref="M:Knx.Falcon.Sdk.KnxBus.RequestGroupValueAsync(Knx.Falcon.GroupAddress,Knx.Falcon.MessagePriority,System.Threading.CancellationToken)"/>. Sends a group value read request
                to the bus with the specified priority without waiting for a response.
            </summary>
            <param name="groupAddress">The group address</param>
            <param name="priority">The message priority to use</param>
            <param name="cancellationToken">Can be used to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation.
                The result is true if the message was acknowledged positively,
                true if the message was acknowledged negatively.
                When sent on multiple RF modes, true is returned only if acknowledged positively on all modes.
            </returns>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.ConnectionStateChanged">
            <summary>
                Wrapper event to relay the event <see cref="E:Knx.Falcon.Sdk.KnxBus.ConnectionStateChanged"/> to notify when
                <see cref="P:Knx.Falcon.Sdk.KnxBus.ConnectionState"/> has changed
            </summary>
        </member>
        <member name="E:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.GroupMessageReceived">
            <summary>
                Wrapper event to relay the event <see cref="E:Knx.Falcon.Sdk.KnxBus.GroupMessageReceived"/> to notify when
                a group message was received from the bus
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.StateChangedInvoker(System.Object,System.EventArgs)">
            <summary>
                Method used to relay the event <see cref="E:Knx.Falcon.Sdk.KnxBus.ConnectionStateChanged"/> from the KNX Bus
                to the handlers subscribed to it
            </summary>
            <param name="sender">Who fires the event</param>
            <param name="args">The new state</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.Model.Wrappers.KnxBusWrapper.GroupMessageInvoker(System.Object,Knx.Falcon.GroupEventArgs)">
            <summary>
                Method used to relay the event <see cref="E:Knx.Falcon.Sdk.KnxBus.GroupMessageReceived"/> from the KNX Bus
                to the handlers subscribed to it    
            </summary>
            <param name="sender"> Who fires the event </param>
            <param name="args"> The new group message </param>
        </member>
        <member name="T:KNX_Virtual_Integrator.ViewModel.Commands.ICommand">
            <summary>
            Represents a command that can be executed and whose execution status can be queried.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.Commands.ICommand.CanExecute(System.Object)">
            <summary>
            Determines whether the command can execute with the specified parameter.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <returns>True if the command can execute; otherwise, false.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.Commands.ICommand.Execute(System.Object)">
            <summary>
            Executes the command with the specified parameter.
            </summary>
            <param name="parameter">The parameter to execute the command with.</param>
        </member>
        <member name="E:KNX_Virtual_Integrator.ViewModel.Commands.ICommand.CanExecuteChanged">
            <summary>
            Occurs when the ability of the command to execute changes.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommand`1">
            <summary>
            Represents a command that can be executed with a parameter and whose execution status can be queried.
            </summary>
            <typeparam name="T">The type of the parameter used by the command.</typeparam>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommand`1"/> class.
            </summary>
            <param name="execute">The action to execute when the command is invoked.</param>
            <param name="canExecute">A function to determine whether the command can be executed. If null, the command can always be executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the execute action is null.</exception>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Determines whether the command can execute with the specified parameter.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <returns>True if the command can execute; otherwise, false.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommand`1.Execute(System.Object)">
            <summary>
            Executes the command with the specified parameter.
            </summary>
            <param name="parameter">The parameter to execute the command with.</param>
        </member>
        <member name="E:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when the ability of the command to execute changes.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommandWithResult`2">
            <summary>
            Represents a command that can be executed with a parameter and returns a result, with the ability to query whether the command can be executed.
            </summary>
            <typeparam name="T">The type of the parameter used by the command.</typeparam>
            <typeparam name="TResult">The type of the result returned by the command.</typeparam>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommandWithResult`2.#ctor(System.Func{`0,`1},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommandWithResult`2"/> class.
            </summary>
            <param name="execute">The function to execute when the command is invoked, which returns a result.</param>
            <param name="canExecute">A function to determine whether the command can be executed. If null, the command can always be executed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the execute function is null.</exception>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommandWithResult`2.CanExecute(System.Object)">
            <summary>
            Determines whether the command can execute with the specified parameter.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <returns>True if the command can execute; otherwise, false.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommandWithResult`2.ExecuteWithResult(System.Object)">
            <summary>
            Executes the command with the specified parameter and returns the result.
            </summary>
            <param name="parameter">The parameter to execute the command with.</param>
            <returns>The result of executing the command.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the parameter is not of the correct type.</exception>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommandWithResult`2.Execute(System.Object)">
            <summary>
            Executes the command with the specified parameter. This method calls <see cref="M:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommandWithResult`2.ExecuteWithResult(System.Object)"/> and ignores the result.
            </summary>
            <param name="parameter">The parameter to execute the command with.</param>
        </member>
        <member name="E:KNX_Virtual_Integrator.ViewModel.Commands.RelayCommandWithResult`2.CanExecuteChanged">
            <summary>
            Occurs when the ability of the command to execute changes.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.ViewModel.ConnectionInterfaceViewModel">
            <summary>
            Represents a view model for a connection interface, including connection details and display information.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.ConnectionInterfaceViewModel.ConnectorType">
            <summary>
            Gets the type of connector for the connection interface.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.ConnectionInterfaceViewModel.DisplayName">
            <summary>
            Gets or sets the display name of the connection interface.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.ConnectionInterfaceViewModel.ConnectionString">
            <summary>
            Gets or sets the connection string used for the connection interface.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.ConnectionInterfaceViewModel.#ctor(Knx.Falcon.Configuration.ConnectorType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.ViewModel.ConnectionInterfaceViewModel"/> class.
            </summary>
            <param name="connectorType">The type of connector for the connection interface.</param>
            <param name="displayName">The display name of the connection interface.</param>
            <param name="connectionString">The connection string for the connection interface.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.ConnectionInterfaceViewModel.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>The display name of the connection interface.</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.ViewModel.MainViewModel">
             <summary>
             MainViewModel class that serves as a central relay for all partial classes in the ViewModel.
            
             This file ONLY contains:
             - The constructor for `MainViewModel`, which initializes RelayCommands and other necessary components.
            
             This setup ensures that the `MainViewModel` class effectively manages and links the functionality defined across multiple partial classes,
             providing a unified interface and behavior for the application's main view.
             
             The ViewModels are created for each window and for special tasks, such as model management across windows.
             </summary>
             
             <summary>
             ViewModel for managing the layout and commands in the MainWindow.
            
             This class handles:
             - The box width in the TestedElements
             - The address file used to display addresses in the Main Window
             
             Note: The `RelayCommand` instances are initialized in the constructor of `MainViewModel`.
             </summary>
             <summary>
             ViewModel for managing functional models in the system.
            
             This class holds attributes and methods related to functional models, including:
             - A dictionary for storing functional models (`IFunctionalModelDictionary`).
             - The currently selected model (`SelectedModel`).
             
             It provides an observable collection (`Models`) to track and manage a list of models,
             and includes properties for selecting a model and updating its name. 
             Property changes are tracked using `INotifyPropertyChanged` to update the UI dynamically.
             
             Note: The `RelayCommand` instances are initialized in the constructor of `MainViewModel`.
             </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ConnectionTypes">
            <summary>
            The list of strings that represents all three possible connection types handled by the application.
            The three types are : "IP", "Remote IP (NAT)" and "USB".
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._discoveredInterfacesVisibility">
            <summary>
            The visibility state of the discovered interface listBox in <see cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.DiscoveredInterfacesVisibility">
            <summary>
            Gets or sets the visibility state of the discovered interface
            listBox in <see cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._remoteConnexionVisibility">
            <summary>
            The visibility state of the content related to
            remote connection in <see cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.RemoteConnexionVisibility">
            <summary>
            Gets or sets the visibility state of the content related to
            remote connection in <see cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._secureConnectionVisibility">
            <summary>
            The visibility state of the content related to
            secure connection in <see cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SecureConnectionVisibility">
            <summary>
            Gets or sets the visibility state of the content related to
            secure connection in <see cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._errorMessageVisibility">
            <summary>
            The visibility state of the error messages in <see cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ErrorMessageVisibility">
            <summary>
            Gets or sets the visibility state of the error messages
            in <see cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.#ctor(KNX_Virtual_Integrator.Model.ModelManager)">
            <summary>
            Constructor of the ViewModel, subscribes everything concerning the viewModel and initializes every other attribute.
            </summary>
            <param name="modelManager"></param>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.BoxWidth">
            <summary>
            The width of the boxes in the <see cref="T:KNX_Virtual_Integrator.Model.Entities.TestedElement"/> listBoxes (displayed element)
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.GroupAddressFile">
            <summary>
            The group address file used to display the addresses in the <see cref="T:KNX_Virtual_Integrator.View.Windows.MainWindow"/>
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.GroupAddressStruct">
            <summary>
            public variable to access a specific value (group address structure) in a private attribute (model manager)
            </summary>
        </member>
        <member name="E:KNX_Virtual_Integrator.ViewModel.MainViewModel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ProjectFolderPath">
            <summary>
            Property that stores the path to the Project folder.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.BusConnection">
            <summary>
            The instance of the KNX Bus Connection to inform the connection window.
            </summary>
            <seealso cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AppSettings">
            <summary>
            Direct reference to the settings so that the windows may access them directly.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._modelManager">
            <summary>
            The reference to the ModelManager to communicate with the Back-end.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.DiscoveredInterfaces">
            <summary>
            Direct reference to the discovered interfaces of the Back-end so that the windows may access them directly
            </summary>
            <seealso cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedConnectionType">
            <summary>
            Gets or sets the <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.SelectedConnectionType"/>
            by allowing the windows to access to it.
            It calls <see cref="M:KNX_Virtual_Integrator.Model.Implementations.BusConnection.OnSelectedConnectionTypeChanged"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedInterface">
            <summary>
            Gets or sets the <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.SelectedInterface"/>
            by allowing the windows to access to it.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.IsConnected">
            <summary>
            Direct reference to <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.IsConnected"/>  so that the windows may access them directly.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.CurrentInterface">
            <summary>
            Direct reference to <see cref="P:KNX_Virtual_Integrator.Model.Implementations.BusConnection.CurrentInterface"/>  so that the windows may access them directly.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ConsoleAndLogWriteLineCommand">
            <summary>
            Command that writes a line of text to the console and log if the provided parameter is not null or whitespace.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ExtractGroupAddressCommand">
            <summary>
            Command that extracts a group address using the GroupAddressManager.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.CreateDebugArchiveCommand">
            <summary>
            Command that creates a debug archive with optional OS info, hardware info, and imported projects.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.FindZeroXmlCommand">
            <summary>
            Command that finds a zero XML file based on the provided file name.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ModelConsoleWriteCommand">
            <summary>
            Command that prints the Model given in parameter.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AllModelsConsoleWriteCommand">
            <summary>
            Command that prints all the Models in <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModels"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModelConsoleWriteCommand">
            <summary>
            Command that prints the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModel"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.PrintStructureDictionaryCommand">
            <summary>
            Command that prints a structure from the dictionary to the console.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.CreateStructureDictionaryCommand">
            <summary>
            Command that creates a structure in the dictionary.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.DuplicateStructureDictionaryCommand">
            <summary>
            Command that duplicates a structure in the dictionary.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.DeleteStructureDictionaryCommand">
            <summary>
            Command that removes a structure from the dictionary.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AddTestedElementToStructureCommand">
            <summary>
            Command that adds a <see cref="T:KNX_Virtual_Integrator.Model.Entities.TestedElement"/> to the model.
            It is not implemented in this version of the app.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.RemoveTestedElementFromStructureCommand">
            <summary>
            Command that removes a <see cref="T:KNX_Virtual_Integrator.Model.Entities.TestedElement"/> from the model.
            It is not implemented in this version of the app.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AddTestedElementToModelStructureCommand">
            <summary>
            Command that adds a <see cref="T:KNX_Virtual_Integrator.Model.Entities.TestedElement"/> to the models of this structure.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.RemoveTestedElementFromModelStructureCommand">
            <summary>
            Command that removes a <see cref="T:KNX_Virtual_Integrator.Model.Entities.TestedElement"/> from the models of this structure.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AddTestToElementCommand">
            <summary>
            Command that adds a test (a row of values) to the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModel"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.RemoveTestFromElementCommand">
            <summary>
            Command that removes a test (a row of values) from the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModel"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AddTestToElementStructureCommand">
            <summary>
            Command that adds a test (a row of values) to the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModel"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.RemoveTestFromElementStructureCommand">
            <summary>
            Command that removes a test (a row of values) from the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructure"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AddDptCmdToElementStructureCommand">
            <summary>
            Command that adds an CMD <see cref="T:KNX_Virtual_Integrator.Model.Entities.DataPointType"/> to the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructure"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AddDptIeToElementStructureCommand">
            <summary>
            Command that adds an IE <see cref="T:KNX_Virtual_Integrator.Model.Entities.DataPointType"/> to the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructure"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.RemoveCmdDptFromElementStructureCommand">
            <summary>
            Command that deletes an CMD <see cref="T:KNX_Virtual_Integrator.Model.Entities.DataPointType"/> from the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructure"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.RemoveIeDptFromElementStructureCommand">
            <summary>
            Command that deletes an IE <see cref="T:KNX_Virtual_Integrator.Model.Entities.DataPointType"/> from the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructure"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AddFunctionalModelToListCommand">
            <summary>
            Command that adds a <see cref="T:KNX_Virtual_Integrator.Model.Entities.FunctionalModel"/> to the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructure"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.DeleteFunctionalModelFromListCommand">
            <summary>
            Command that deletes a <see cref="T:KNX_Virtual_Integrator.Model.Entities.FunctionalModel"/> from the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructure"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AddDptToDictionaryCommand">
            <summary>
            Command that adds a <see cref="T:KNX_Virtual_Integrator.Model.Entities.DataPointType"/> to the structure dictionary. 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.RemoveDptFromDictionaryCommand">
            <summary>
            Command that removes a <see cref="T:KNX_Virtual_Integrator.Model.Entities.DataPointType"/> from the structure dictionary. 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.UndoChangesSelectedStructureCommand">
            <summary>
            Command that undoes the changes done in <see cref="T:KNX_Virtual_Integrator.View.Windows.StructureEditWindow"/>
            to the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructure"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ApplyChangesSelectedStructureCommand">
            <summary>
            Command that applies the changes done in <see cref="T:KNX_Virtual_Integrator.View.Windows.StructureEditWindow"/>
            to the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructure"/>.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ImportDictionaryCommand">
            <summary>
            Command that imports the structure dictionary.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ExportDictionaryCommand">
            <summary>
            Command that exports/saves the structure dictionary.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ImportListAndDictionaryCommand">
            <summary>
            Command that imports list of models and structure diction.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ExportListAndDictionaryCommand">
            <summary>
            Command that exports/saves the structure dictionary and the list of models.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ImportListCommand">
            <summary>
            Command that imports list of models.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ExportListCommand">
            <summary>
            Command that exports/saves the list of models.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ConnectBusCommand">
            <summary>
            Command that connects the computer to the KNX Bus.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.DisconnectBusCommand">
            <summary>
            Command that disconnects the computer from the KNX Bus.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.RefreshInterfacesCommand">
            <summary>
            Command that refreshes the discovered interfaces.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SaveSettingsCommand">
            <summary>
            Command that saves the current application settings.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.GenerateReportCommand">
            <summary>
            Command that generates the report for the latest opened project.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ExtractGroupAddressFileCommand">
            <summary>
            Command that extracts a group address file based on the provided file name and returns a boolean indicating success.
            </summary>
            <returns>True if the extraction was successful; otherwise, false.</returns>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ExtractProjectFilesCommand">
            <summary>
            Command that extracts project files based on the provided file name and returns a boolean indicating success.
            </summary>
            <returns>True if the extraction was successful; otherwise, false.</returns>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.LaunchAnalysisCommand">
            <summary>
            Command that launches the analysis of the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedTestModels"/>.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.SliderMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the event when the left mouse button is pressed down on the slider.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.SliderMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the event when the left mouse button is released on the slider.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.SliderMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the event when the mouse is moved over the slider while dragging.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the mouse movement event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.OnSliderClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the event when the slider is clicked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data for the routed event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.WhenPropertyChanged(System.String)">
            <summary>
            Method used to fire the <see cref="E:KNX_Virtual_Integrator.ViewModel.MainViewModel.PropertyChanged"/> event with
            the propertyName as its <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/>.
            </summary>
            <param name="propertyName">The name of the property that was changed.</param>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._functionalModelList">
            <summary>
            The attribute storing the list of Functional Models
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.Structures">
            <summary>
            Gets the collection of structure of functional models
            to be displayed in the <see cref="T:KNX_Virtual_Integrator.View.Windows.MainWindow"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._selectedModels">
            <summary>
            List of Models that corresponds to the Selected Structure.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModels">
            <summary>
            Gets or sets the list of Models that corresponds to the Selected Structure.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._selectedModel">
            <summary>
            The Selected Model among the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModels"/>.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModel">
            <summary>
            Gets or sets the Selected Model among the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModels"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._selectedStructure">
            <summary>
            The Selected Structure among the list of Structures of Functional Models.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructure">
            <summary>
            Gets or sets the Selected Structure among the list of Structures of Functional Models
            </summary>  
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel.EditedStructureSave">
            <summary>
            The temporary Structure to buffer its modifications in the <see cref="T:KNX_Virtual_Integrator.View.Windows.StructureEditWindow"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._applyChangesErrorMessageVisibility">
            <summary>
            The visibility of Error Messages. Usually hidden.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ApplyChangesErrorMessageVisibility">
            <summary>
            Gets or sets the visibility of Error Messages. Usually hidden.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._pdfPath">
            <summary>
            The file path to which the pdf analysis report should be saved.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.PdfPath">
            <summary>
            Gets or sets the file path to which the pdf analysis report should be saved.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._authorName">
            <summary>
            The name of the author of the Pdf.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.AuthorName">
            <summary>
            Gets or sets the name of the author of the Pdf.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.CommandTimeout">
            <summary>
            Default at 2000 ms and set when calling <see cref="M:KNX_Virtual_Integrator.Model.Implementations.Analyze.TestAll(System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Int32,System.Int32)"/>.
            Used to set an all around timeout for commands.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ElementLatency">
            <summary>
            Default at 0 ms and set when calling <see cref="M:KNX_Virtual_Integrator.Model.Implementations.Analyze.TestAll(System.Collections.ObjectModel.ObservableCollection{KNX_Virtual_Integrator.Model.Entities.FunctionalModel},System.Int32,System.Int32)"/>.
            Used to space out tests, to not saturate the installation.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel.LastTestResults">
            <summary>
            The full list of all the test results.
            It is structured by : Structures -> Models -> Test Elements ->
            Commands (value lines in Test CMD) -> Receptions (value column of Test IE).
            <seealso cref="T:KNX_Virtual_Integrator.Model.Implementations.ResultType"/> 
            </summary>  
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel.AnalysisState">
            <summary>
            The list of the model current analysis state.
            It can have 4 states : Waiting, Running, Finished, None.
            "None" means that the correspondingly displayed image is hidden.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._selectedTestModels">
            <summary>
            The models selected to be tested.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedTestModels">
            <summary>
            Gets or sets the models selected to be tested.
            </summary>  
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._selectedStructureTestWindow">
            <summary>
            Selected structure of functional models.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructureTestWindow">
            <summary>
            Gets or sets the selected structure of functional models.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._selectedModelsTestWindow">
            <summary>
            List of Models that corresponds to the Selected Structure.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModelsTestWindow">
            <summary>
            Gets or sets the list of <see cref="T:KNX_Virtual_Integrator.Model.Entities.FunctionalModel"/> that corresponds to the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedStructureTestWindow"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.MainViewModel._selectedModelTestWindow">
            <summary>
            The selected Model among the Selected Models.
            </summary>  
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModelTestWindow">
            <summary>
            Gets or sets the selected Model among the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedModelsTestWindow"/>.
            </summary>  
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.AddStructToTestModels(System.Int32)">
            <summary>
            Adds all the <see cref="T:KNX_Virtual_Integrator.Model.Entities.FunctionalModel"/> of the Structure to the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedTestModels"/>
            for them to be tested.
            </summary>
            <param name="structKey">The index of the structure in the functionalModelList.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.RmvStructFromTestModels(System.Int32)">
            <summary>
            Removes all the <see cref="T:KNX_Virtual_Integrator.Model.Entities.FunctionalModel"/> of the Structure from the <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedTestModels"/>
            for them to not be tested anymore if they were supposed to.
            </summary>
            <param name="structKey">The index of the structure in the functionalModelList.</param>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ChosenModelsAndState">
            <summary>
            Collection used to display the chosen test models along with various information.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.ClearModelsToTestAndResetTimes">
            <summary>
            Clears all the lists used to hold the functional models and resets the timeout and latency.
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.ViewModel.TestedFunctionalModel">
            <summary>
            Class handling the grouping of various information. It is used to display the chosen test models,
            the state of their analysis and handle window theme changes.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.ViewModel.TestedFunctionalModel.FunctionalModel">
            <summary>
            The chosen functional model. Linked in some ways with <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedTestModels"/>.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.TestedFunctionalModel.State">
            <summary>
            Status of the model analysis. It has 3 (or 4) states : "", "Waiting", "Running", "Finished".
            Except for "", each state is associated with a corresponding image in the UI.
            "" is associated with a collapsed image.
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.ViewModel.TestedFunctionalModel.LightTheme">
            <summary>
            The theme of the App. <seealso cref="P:KNX_Virtual_Integrator.Model.Implementations.ApplicationSettings.EnableLightTheme"/>
            It is changed when the collection <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.ChosenModelsAndState"/> is
            either updated or there is a new TestedFunctionalModel.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.TestedFunctionalModel.#ctor(KNX_Virtual_Integrator.Model.Entities.FunctionalModel)">
            <summary>
            Constructor with only a functional model
            </summary>
            <param name="functionalModel">The functional model to test</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.TestedFunctionalModel.#ctor(KNX_Virtual_Integrator.Model.Entities.FunctionalModel,System.Boolean)">
            <summary>
            Constructor handling the theme
            </summary>
            <param name="functionalModel">The functional model to test</param>
            <param name="lightTheme">The current app theme</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.TestedFunctionalModel.Equals(System.Object)">
            <summary>
            Override to only test the equality of the <see cref="P:KNX_Virtual_Integrator.ViewModel.TestedFunctionalModel.FunctionalModel"/>.
            Done to reduces issues when adding or checking the chosen test models.
            </summary>
            <param name="obj">The compared object (should be a TestedFunctionalModel)</param>
            <returns>True if the FunctionalModels are equal; false otherwise.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.ViewModel.TestedFunctionalModel.GetHashCode">
            <summary>
            Override to allow Equals to work as intended.
            </summary>
            <returns>The <see cref="P:KNX_Virtual_Integrator.ViewModel.TestedFunctionalModel.FunctionalModel"/> <see cref="M:KNX_Virtual_Integrator.Model.Entities.FunctionalModel.GetHashCode"/> .</returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.View.Utils.BigIntegerToStringConverter">
            <summary>
            Converter class used to convert between BigInteger type and String type
            BigIntegers are needed in the software as they are the type that KNX GroupValue uses
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Utils.BigIntegerToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from BigInteger to String
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Utils.BigIntegerToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from String to BigInteger
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:KNX_Virtual_Integrator.View.Utils.IndicesToTupleConverter">
            <summary>
            Converter class used to convert from two Int values to a Tuple
            Specifically used in the Structure Edit Window, delete DPT button, to pass both the element structure's index and the to-be-deleted DPT's index
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Utils.IndicesToTupleConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from the two Int values to the Tuple
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Utils.IndicesToTupleConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert from the Tuple to the two Int values
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:KNX_Virtual_Integrator.View.WindowManager">
            <summary>
            The class that instantiates every window and helps the MainWindow manage the the interactions with the other ones.
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.View.WindowManager.MainWindow">
            <summary>
            The MainWindow instance 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.View.WindowManager.SettingsWindow">
            <summary>
            The SettingsWindow instance 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.View.WindowManager.ConnectionWindow">
            <summary>
            The ConnectionWindow instance 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.View.WindowManager.TestConfigWindow">
            <summary>
            The TestConfigWindow instance 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.View.WindowManager.ReportCreationWindow">
            <summary>
            The ReportCreationWindow instance 
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.View.WindowManager.StructureEditWindow">
            <summary>
            The StructureEditWindow instance 
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.WindowManager.#ctor(KNX_Virtual_Integrator.ViewModel.MainViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.View.WindowManager"/> class.
            It instantiates every window once since they are never fully closed (only hidden).
            They all have the same MainViewModel to communicate effectively.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.WindowManager.ShowMainWindow">
            <summary>
            Shows the Main Window, even when it is already open, with Focus().
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.WindowManager.ShowSettingsWindow">
            <summary>
            Shows the Settings Window, even when it is already open, with Focus().
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.WindowManager.ShowConnectionWindow">
            <summary>
            Shows the Connection Window, even when it is already open, with Focus().
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.WindowManager.ShowTestConfigWindow">
            <summary>
            Shows the Analysis/Test Configuration Window, even when it is already open, with Focus().
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.WindowManager.ShowReportCreationWindow">
            <summary>
            Shows the Analysis Report Creation Window, even when it is already open, with Focus().
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.WindowManager.ShowStructureEditWindow">
            <summary>
            Shows the Structure Edition Window, even when it is already open, with Focus().
            Stops the user from interacting with other windows as long as it is open with ShowDialog()
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow">
            <summary>
            Class handling any change in the UI of the connection Window.
            The Connection Window handles every part that concerns the connection to the KNX Bus, be it through IP, IP NAT or USB.
            </summary>
            <summary>
            ConnectionWindow
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.View.Windows.ConnectionWindow._viewModel">
            <summary>
            MainViewModel instance to allow communication with the backend
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ConnectionWindow.#ctor(KNX_Virtual_Integrator.ViewModel.MainViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/> class,
            loading and applying settings from the appSettings file, and setting default values where necessary.
            Allows the viewModel to be accessed from this window.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ConnectionWindow.ClosingConnectionWindow(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Connection window closing event by canceling the closure, restoring previous settings, and hiding the window.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ConnectionWindow.UpdateWindowContents(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the contents (texts, textboxes, checkboxes, ...) of the connection window according to the application settings.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ConnectionWindow.TranslateWindowContents">
            <summary>
            Updates the text contents of the connection window (only French and English).
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ConnectionWindow.ApplyThemeToWindow">
            <summary>
            Updates the color theme of the window according to <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings.EnableLightTheme"/> state.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ConnectionWindow.ApplyScaling">
            <summary>
            Updates the size of the window and its contents according to <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings.AppScaleFactor"/>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ConnectionWindow.ImportKeysFileButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to import a keys file.
            Displays an OpenFileDialog for the user to select the file,
            then extracts necessary files.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ConnectionWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.View.Windows.MainWindow">
            <summary>
            Class for the Main Window. It implements interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.View.Windows.MainWindow._viewModel">
            <summary>
            Instance of <see cref="T:KNX_Virtual_Integrator.ViewModel.MainViewModel"/> to communicate with the backend
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.View.Windows.MainWindow._windowManager">
            <summary>
            Instance of <see cref="T:KNX_Virtual_Integrator.View.WindowManager"/> to access windows
            </summary>
        </member>
        <member name="P:KNX_Virtual_Integrator.View.Windows.MainWindow.UserChooseToImportGroupAddressFile">
            <summary>
            True if the user choose to import a group addresses file, false if it's a project knx file 
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.View.Windows.MainWindow._cancellationTokenSource">
            <summary>
            The token source used to signal cancellation requests for ongoing tasks.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.#ctor(KNX_Virtual_Integrator.ViewModel.MainViewModel,KNX_Virtual_Integrator.View.WindowManager)">
            <summary>
            Initializes the window with the specified MainViewModel and WindowManager.
            To ensure correct loading of content, the scaling is only applied once the window is mostly loaded.
            </summary>
            <param name="viewModel">The <see cref="T:KNX_Virtual_Integrator.ViewModel.MainViewModel"/> given to the windows</param>
            <param name="wm">The <see cref="T:KNX_Virtual_Integrator.View.WindowManager"/> given to this window</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.ApplyScaling">
            <summary>
            Update the size of the window and its contents according to <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings.AppScaleFactor"/>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.ApplyThemeToWindow">
            <summary>
            Updates the color theme of the window according to <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings.EnableLightTheme"/> state.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.TranslateWindowContents">
            <summary>
            Updates the text contents of the connection window (only French and English).
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.UpdateWindowContents(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the contents (texts, textboxes, checkboxes, ...) of the connection window according to the application settings.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.OpenConnectionWindow(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to open the <see cref="T:KNX_Virtual_Integrator.View.Windows.ConnectionWindow"/>.
            Opens an instance of ConnectionWindow or focuses on it.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.ImportProjectButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to import a KNX project file.
            Displays an OpenFileDialog for the user to select the project file and extracts necessary files.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.ImportGroupAddressFileButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to import a group addresses file.
            Displays an OpenFileDialog for the user to select the file and extracts necessary files.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.ExportDictionnaryButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to export a dictionary file.
            Displays an SaveFileDialog for the user to select the filepath to which should be saved the dictionary.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.ImportDictionnaryButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to import a dictionary file.
            Displays an OpenFileDialog for the user to select the file and extracts the necessary information.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.SettingsButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to open the <see cref="T:KNX_Virtual_Integrator.View.Windows.SettingsWindow"/>..
            Opens an instance of SettingsWindow or focuses on it.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.OnTestConfigButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to open the <see cref="T:KNX_Virtual_Integrator.View.Windows.TestConfigWindow"/>.
            Opens an instance of the Test Configuration Window or focuses on it.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.OnCreateTestReportButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to open the <see cref="T:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow"/>.
            Opens an instance of Report Creation Window or focuses on it.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.ClosingMainWindow(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the event of closing the main window.
            Shuts the application down.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.CreateStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to create a Structure.
            Adds a Structure to the Dictionary of Functional Model Structures.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.DuplicateStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to duplicate a Structure.
            Adds a Structure to the Dictionary of Functional Model Structures by copying the selected one.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.EditStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to modify a Structure.
            Opens an instance of <see cref="T:KNX_Virtual_Integrator.View.Windows.StructureEditWindow"/> and disables the other windows.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.DeleteStructuresButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to delete a Structure.
            Removes a Structure from the Dictionary of Functional Model Structures and all its models.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.AddFunctionalModelToListButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to add a Functional Model to the list corresponding to the selected structure.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.DeleteFunctionalModelFromListButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to delete a Functional Model.
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.AddTestToElementButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to add a Test to a Tested Element
            Adds a line of values to the Tested Element
            The number of fields added is equal to the number of DPTs in the Tested Element
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.RemoveTestFromElementButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to remove a Test from a Tested Element
            Deletes a full line of values to the Tested Element
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.DeactivateValueCmdButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click to deactivate a testCmd value(not used)
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.DeactivateValueIeButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click to deactivate a testIE value
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.DeactivateValue(System.Object,System.Windows.RoutedEventArgs,System.String)">
            <summary>
            Handles the button click to deactivate a test value
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
            <param name="tests">the type of Test value that is deactivated (TestCmd or TestIe).</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.ResetValueCmdButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click to reset to 0 a Cmd Value that has been deactivated because it was unknown 
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.ResetValueIeButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click to reset to 0 a Ie Value that has been deactivated because it was unknown 
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.ResetValue(System.Object,System.Windows.RoutedEventArgs,System.String)">
            <summary>
            Handles the reset to 0 a Value that has been deactivated because it was unknown 
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
            <param name="tests">the type of Test value that is reset (TestCmd or TestIe).</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.LoadAddressesOntoTreeViewAsync(System.Windows.Controls.TreeView)">
            <summary>
            Aynschronously loads addresses onto a treeView to be displayed.
            </summary>
            <param name="treeView">The treeView onto which will be loaded the addresses.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.AddNodeRecursively(System.Xml.Linq.XNode,System.Windows.Controls.ItemCollection,System.Int32,System.Int32)">
            <summary>
            Adds XML nodes recursively to a TreeView.
            </summary>
            <param name="xmlNode">The XML node to add.</param>
            <param name="parentItems">The parent collection of TreeView items.</param>
            <param name="level">The depth level of the current XML node.</param>
            <param name="index">The index of the current XML node among its siblings.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.CreateTreeViewItemFromXmlNode(System.Xml.Linq.XNode,System.Int32,System.Int32)">
            <summary>
            Creates a TreeViewItem from an XML node, with its corresponding image.
            </summary>
            <param name="xmlNode">The XML node to create a TreeViewItem from.</param>
            <param name="level">The depth level of the XML node.</param>
            <param name="index">The index of the XML node among its siblings.</param>
            <returns>A TreeViewItem representing the XML node.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.FindParent``1(System.Windows.DependencyObject)">
            <summary>
            Recursive method that searches for the parent of the child object of a specific type in the visual tree.
            </summary>
            <param name="child">The child from which we search for the parent.</param>
            <typeparam name="T">The type of item that should be the parent.</typeparam>
            <returns>Either null if not parent is found or the parent (found recursively or not).</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>
            Recursive method that searches for the child of the parent that is of a specific type in the visual tree.
            </summary>
            <param name="parent">The parent from which to search.</param>
            <typeparam name="T">The type of the child.</typeparam>
            <returns>The child of the specified type, found recursively.</returns>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow">
            <summary>
            Represents the window for creating reports.
            </summary>
            <summary>
            ReportCreationWindow
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow._mainViewModel">
            <summary>
            MainViewModel instance to allow communication with the backend
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.#ctor(KNX_Virtual_Integrator.ViewModel.MainViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow"/> class.
            </summary>
            <param name="mv">The view model associated with the window.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.UpdateWindowContents(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the contents (texts, textboxes, checkboxes, ...) of the report window according to the application settings.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.TranslateWindowContents">
            <summary>
            Updates the text contents of the report window (only French and English).
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.ApplyThemeToWindow">
            <summary>
            Updates the color theme of the window according to <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings.EnableLightTheme"/> state.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.ApplyScaling">
            <summary>
            Update the size of the window and its contents according to <see cref="P:KNX_Virtual_Integrator.Model.Interfaces.IApplicationSettings.AppScaleFactor"/>
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.Header_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseLeftButtonDown event to initiate dragging of the window.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.SaveButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click event of the save button to generate a report.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.CancelButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click event of the cancel button. It only clears the text
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.ClosingReportCreationWindow(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Connection window closing event by canceling the closure, restoring previous settings, and hiding the window.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.SetPdfPathButton_OnClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to choose the file path to which the PDF report should be saved.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ReportCreationWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.View.Windows.SettingsWindow">
            <summary>
             Window used to set the application settings and create reports.
            </summary>
            <summary>
            SettingsWindow
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.View.Windows.SettingsWindow._viewModel">
            <summary>
            MainViewModel instance to allow communication with the backend
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.#ctor(KNX_Virtual_Integrator.ViewModel.MainViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.View.Windows.SettingsWindow"/> class,
            loading and applying settings from the appSettings file, and setting default values where necessary.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.ClosingSettingsWindow(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the settings window closing event by canceling the closure, restoring previous settings, and hiding the window.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.UpdateWindowContents(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the contents (texts, textboxes, checkboxes, ...) of the settings window accordingly to the application settings.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.TranslateWindowContents">
            <summary>
            This function translates all the texts contained in the setting window to the application language
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.ApplyThemeToWindow">
            <summary>
            This functions applies the light/dark theme to the settings window
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.SaveButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the save button click event by retrieving and validating settings from the settings window,
            saving them, and updating relevant UI elements.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.CancelButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the cancel button click event by restoring previous settings and hiding the settings window.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.TabControl_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the <see cref="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.TabControl_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)"/> event to adjust the visibility of buttons based on the selected tab.
            </summary>
            <param name="sender">The source of the event, expected to be a <see cref="T:System.Windows.Controls.TabControl"/>.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.CreateDebugReport(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Creates a debug report based on the state of various checkboxes and the include address list.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.Hyperlink_RequestNavigate(System.Object,System.Windows.Navigation.RequestNavigateEventArgs)">
            <summary>
            Handles the click event on a hyperlink by attempting to open the URL in the default web browser.
            If an error occurs during the process, an error message is logged.
            </summary>
            <param name="sender">The source of the event, typically the hyperlink control.</param>
            <param name="e">Event data containing the URI to navigate to.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.SettingsWindow_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles the key down events in the settings window. Depending on the key pressed, 
            either restores previous settings and hides the window, or saves new settings and then hides the window.
            </summary>
            <param name="sender">The source of the event, typically the settings window.</param>
            <param name="e">Event data containing information about the key pressed.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.Header_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Initiates a drag operation when the left mouse button is pressed on the header, allowing the window to be moved.
            </summary>
            <param name="sender">The source of the event, typically the header control.</param>
            <param name="e">Event data containing information about the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.ApplyScaling(System.Single)">
            <summary>
            Applies scaling to the window by adjusting the layout transform and resizing the window based on the specified scale factor.
            </summary>
            <param name="scale">The scale factor to apply.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.OnSliderClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click event on the slider by delegating it to <see cref="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.OnSliderClick(System.Object,System.Windows.RoutedEventArgs)"/>
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.SettingsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.View.Windows.StructureEditWindow">
            <summary>
            Window used to edit a Functional Model structure
            Is opened when a new Functional Model Structure is created
            Can also be opened later to edit an already existing Functional Model Structure
            </summary>
            <summary>
            StructureEditWindow
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.#ctor(KNX_Virtual_Integrator.ViewModel.MainViewModel)">
            <summary>
            Default constructor for StructureEditWindow
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.ClosingStructureEditWindow(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the Model Edit window closing event by canceling the closure, restoring previous settings, and hiding the window.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.UpdateWindowContents(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the contents (texts, textboxes, checkboxes, ...) of the report window according to the application settings.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.RemoveTestedElementFromModelStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to remove a Tested Element from a Functional Model.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.AddTestedElementToModelStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to add a Tested Element to a Model Structure.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.AddDptCmdToElementStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to add a DPT to send to a tested element structure
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.AddDptIeToElementStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to add a DPT to send to a tested element structure
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.ResetValueCmdStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click to reset to 0 a Cmd Value that has been deactivated because it was unknown 
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.ResetValueIeStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click to reset to 0 an Ie Value that has been deactivated because it was unknown 
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.ResetValueStructure(System.Object,System.Windows.RoutedEventArgs,System.String)">
            <summary>
            Handles the reset to 0 a Value that has been deactivated because it was unknown 
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
            <param name="tests">the type of Test value that is reset (TestCmd or TestIe).</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.DeactivateValueIeStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click to deactivate a testIE value
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.DeactivateValueStructure(System.Object,System.Windows.RoutedEventArgs,System.String)">
            <summary>
            Handles the button click to deactivate a test value
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
            <param name="tests">the type of Test value that is deactivated (TestCmd or TestIe).</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.AddTestToElementStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to add a Test to a Tested Element
            Adds a line of values to the Tested Element
            The number of fields added is equal to the number of DPTs in the Tested Element
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.RemoveTestFromElementStructureButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the button click event to remove a Test from a Tested Element
            Deletes a full line of values to the Tested Element
            </summary>
            <param name="sender">The button that raised the event.</param>
            <param name="e">The click event data.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.StructureEditWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.View.Windows.TestConfigWindow">
            <summary>
            The class of the window that handles the test configuration.
            </summary>
            <summary>
            TestConfigWindow
            </summary>
        </member>
        <member name="F:KNX_Virtual_Integrator.View.Windows.TestConfigWindow._viewModel">
            <summary>
            MainViewModel instance to allow communication with the backend
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.#ctor(KNX_Virtual_Integrator.ViewModel.MainViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:KNX_Virtual_Integrator.View.Windows.TestConfigWindow"/> class,
            loading and applying settings from the appSettings, and subscribing its checkBox handlers to the listBox events
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.ClosingTestConfigWindow(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Handles the TestConfig window closing event by canceling the closure, restoring previous settings, and hiding the window.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.UpdateWindowContents(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Updates the contents (texts, textboxes, checkboxes, ...) of the test configuration window according to the application settings.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.TranslateWindowContents">
            <summary>
            This function translates all the texts contained in the test configuration window to the application language.
            Only English and French are supported
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.ApplyThemeToWindow">
            <summary>
            This functions applies the light/dark theme to the test configuration window
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.ApplyScaling">
            <summary>
            Applies scaling to the window by adjusting the layout transform and resizing the window based on the specified scale factor.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.CheckedModelsHandler(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the check event of the checkbox for the model to add it to the list to test
            See also <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedTestModels"/>
            </summary>
            <param name="sender">The source of the event, the checkbox of a model list item.</param>
            <param name="e">Event data containing information about the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.UncheckedModelsHandler(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the uncheck event of the checkbox for the model to remove it from the list to test
            See also <see cref="P:KNX_Virtual_Integrator.ViewModel.MainViewModel.SelectedTestModels"/>
            </summary>
            <param name="sender">The source of the event, the checkbox of a model list item.</param>
            <param name="e">Event data containing information about the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.CheckIfModelsWasCheckedHandler(System.Object,System.EventArgs)">
            <summary>
            Checks all models of the current structure to see if they were checked at some point in time
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">Event data containing information about the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.CheckedStructureHandler(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the check event of the checkbox for structures to check all of its models.
            See also <see cref="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.AddStructToTestModels(System.Int32)"/>
            </summary>
            <param name="sender">The source of the event, the checkbox of a structure list item.</param>
            <param name="e">Event data containing information about the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.UncheckedStructureHandler(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the uncheck event of the checkbox for structures to uncheck all of its models.
            See also <see cref="M:KNX_Virtual_Integrator.ViewModel.MainViewModel.RmvStructFromTestModels(System.Int32)"/>
            </summary>
            <param name="sender">The source of the event, the checkbox of a structure list item.</param>
            <param name="e">Event data containing information about the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.OnClearButtonClick_ClearModelsToTest(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the clear event when the user clicks on the clear button of the window.
            It will clear the Models to test, reset the timeout and the latency.
            </summary>
            <param name="sender">The source of the event, typically the header control.</param>
            <param name="e">Event data containing information about the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.LaunchTestButton_OnClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the launch of the analysis on a different thread to not freeze the UI (WIP)
            </summary>
            <param name="sender">The source of the event, typically the header control.</param>
            <param name="e">Event data containing information about the mouse button event.</param>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.TestConfigWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:KNX_Virtual_Integrator.View.Windows.ChosenModelDataTemplateSelector">
            <summary>
            Implementation of DataTemplateSelector in order to update the status of the analysis between 3 images :
            Waiting, Running and Finished.
            Handles Theme changes.
            </summary>
        </member>
        <member name="M:KNX_Virtual_Integrator.View.Windows.ChosenModelDataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            The method called when the CollectionChanged event of the listBox ItemSource is raised.
            </summary>
            <param name="item">The item concerned by CollectionChanged.</param>
            <param name="container">The visual container.</param>
            <returns>The concerned item data template.</returns>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
