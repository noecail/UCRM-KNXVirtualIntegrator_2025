<!-- 
    <summary>
    This resource dictionary contains styles for various UI elements such as buttons, titles, and other interface components.

    It centralizes the styling of UI elements to ensure a consistent look and feel across the application.
    Each style is defined with a unique key and can be applied to different controls throughout the application.

-->


<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Colors.xaml" />
        <ResourceDictionary Source="Images.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- ______________________________BUTTON STYLE________________________________________________________________________________________________________
    BUTTON STYLE 
    -> the main properties are defined in the base button
    
    -BaseButtonStyle:
        The fundamental style for buttons with a solid background, white text, and centered content.
        To customize this style:
        - Background: Change the button's background color using the ButtonGray resource.
        - Foreground: Modify the text color with the TextWhite resource.
        - BorderBrush and BorderThickness: Adjust these properties to change the button's border appearance.
        - FontSize: Set the size of the button text.
        - Padding: Adjust the internal spacing within the button.
        - Height: Set the button's height.

    IconTextButtonStyle:
        A style for buttons that include both an icon and text. It is based on the BaseButtonStyle.
        To customize:
        - Icon: Set the image source using the Tag property.
        - Text: Modify the text content and its appearance.

    IconButtonStyle:
        A style for buttons that display only an icon. It also inherits from BaseButtonStyle.
        To customize:
        - Icon: Set the image source using the Tag property.
        - Height: Adjust the button's height and icon size as needed.

    ConnectButton:
        Style for a connection button, based on IconButtonStyle, that changes appearance based on the connection status.
      - When `IsConnected` is True: Background is ButtonGreen with a connected icon. 
        - Hover/Press: Background changes to AccentuateButtonGreen.
      - When `IsConnected` is False: Background is ButtonRed with a disconnected icon.
        - Hover/Press: Background changes to AccentuatedButtonRed.
    
    Use these styles to ensure consistency across button elements in the application. Modify the parameters to fit your design requirements.

-->
    <!-- Style de base pour le bouton -->
    <Style x:Key="BaseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource GrayBrush}" />
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource NoColorBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="10,5,10,5"/>
        <Setter Property="Height" Value="35"/>

        <!-- Hauteur du bouton -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        CornerRadius="0">
                        <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Content="{TemplateBinding Content}"
                                      ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                                           />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style bouton avec icon et texte-->
    <Style x:Key="IconTextButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        Margin="{TemplateBinding Margin}"
                        CornerRadius="0">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">

                            <!-- Icon -->
                            <Image Source="{TemplateBinding Tag}"
                               VerticalAlignment="Center"
                               HorizontalAlignment="Center"
                               Margin="0,0,5,0"
                               Height="20"
                            />

                            <!-- Text -->
                            <ContentPresenter 
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                            />

                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style bouton avec icon -->
    <Style x:Key="IconButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            Width="{TemplateBinding Height}"
                            Height="{TemplateBinding Height}"
                            CornerRadius="0">
                        <Grid>

                            <!-- Icon -->
                            <Image Source="{TemplateBinding Tag}"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"
                           Height="30"
                           />

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Style pour le bouton de connexion -->
    <Style TargetType="Button" x:Key="ConnectButton" BasedOn="{StaticResource IconButtonStyle}">
        <Setter Property="Padding" Value="5"/>
        <Style.Triggers>
            <!-- Quand IsConnected est True -->
            <DataTrigger Binding="{Binding IsConnected}" Value="True">
                <Setter Property="Background" Value="{StaticResource KnxGreenBrush}"/>
                <!-- Triggers pour les états de survol et de clic -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="btnBorder" 
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Padding="{TemplateBinding Padding}"
                                        CornerRadius="0"
                                        Width="{TemplateBinding Width}"
                                        Height="{TemplateBinding Height}">
                                <Grid>
                                    <Image VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Fill" Source="{StaticResource ConnectedDrawingImage}" />
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource KnxLightGreenBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource KnxLightGreenBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- Quand IsConnected est "False" -->
            <DataTrigger Binding="{Binding IsConnected}" Value="False">
                <Setter Property="Background" Value="{StaticResource RedBrush}"/>
                <!-- Triggers pour les états de survol et de clic -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="btnBorder" 
                                    Background="{TemplateBinding Background}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}"
                                    CornerRadius="0"
                                    Width="{TemplateBinding Width}"
                                    Height="{TemplateBinding Height}">
                                <Grid>
                                    <Image Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="UniformToFill" Source="{StaticResource DisconnectedDrawingImage}"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource RedAccentBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource RedAccentBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- Style pour le bouton de suppression de Modèle Fonctionnel -->
    <Style x:Key="DeleteFunctionalModelButtonStyle" TargetType="Button" BasedOn="{StaticResource IconButtonStyle}">
        <Setter Property="Background" Value="{StaticResource NoColorBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Tag" Value="{StaticResource BlackBinDrawingImage}"/>
                <Setter Property="Background" Value="{StaticResource OffWhiteBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource DarkGrayBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Style pour le bouton de suppression d'Élément à Tester-->
    <Style x:Key="DeleteTestedElementButtonStyle" TargetType="Button" BasedOn="{StaticResource DeleteFunctionalModelButtonStyle}">
        <!-- À completer, notamment pour réduire la taille du bouton-->
    </Style>
    

        <!-- Style pour le bouton refresh -->
    <Style x:Key="RefreshButton" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource BlueBrush }"/>
        <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="20" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="btnBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Survol -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background"
                                    Value="{StaticResource BlueAccentBrush}" />
                        </Trigger>
                        <!-- Clic -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background"
                                    Value="{StaticResource BlueAccentBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    
    
    <Style TargetType="Button" x:Key="CreateFunctionalModelButtonStyle" BasedOn="{StaticResource IconTextButtonStyle}">
        <Setter Property="Background" Value="{StaticResource BlueBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="btnBorder"
                            Background="{TemplateBinding Background}"
                            VerticalAlignment="Bottom"
                            BorderThickness="0,0,1,0"
                            BorderBrush="{StaticResource GrayBorderBrush}"
                            >
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <Image VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="UniformToFill" Source="{StaticResource AddDrawingImage}" Height="25" Width="25" Margin="0,5,5,5"/>
                            <TextBlock Text="{StaticResource CreateModel}" VerticalAlignment="Center" FontSize="14"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource BlueAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource BlueAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="Button" x:Key="AddTestedElementToModelButtonStyle" BasedOn="{StaticResource IconTextButtonStyle}">
        <Setter Property="Background" Value="{StaticResource BlueBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="btnBorder"
                            Background="{TemplateBinding Background}"
                            VerticalAlignment="Bottom"
                            BorderThickness="0,0,1,0"
                            BorderBrush="{StaticResource GrayBorderBrush}"
                    >
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <Image VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="UniformToFill" Source="{StaticResource AddDrawingImage}" Height="25" Width="25" Margin="0,5,5,5"/>
                            <TextBlock Text="{StaticResource AddTestedElement}" VerticalAlignment="Center" FontSize="10"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource BlueAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource BlueAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <!-- ______________________________________________________________________________________________________________________________ -->
    <!-- _____________________________________________________TEXTS___________________________________________________________________ -->
    <!-- Style pour les titres -->
    <Style x:Key="TitleTextStyle" TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}" />
    </Style>
    <!-- ______________________________________________________________________________________________________________________________ -->
    <!-- _____________________________________________________OTHER ELEMENTS___________________________________________________________ -->
    <!-- Style pour le listbox de modèles -->
    <Style x:Key="ModelListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Background" Value="{StaticResource OffWhiteBackgroundBrush}"/>
        <!-- Fond par défaut -->
        <Setter Property="BorderBrush" Value="{StaticResource GrayBorderBrush}"/>
        <!-- Couleur du contour -->
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <!-- Contour supérieur et inférieur -->
        <Setter Property="Height" Value="30"/>
        <!-- Hauteur de l'élément -->
        <Setter Property="Margin" Value="0"/>
        <!-- Margin pour le ListBoxItem -->
        <Setter Property="Padding" Value="10,0,10,0"/>
        <!-- Padding pour l'icône -->
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <!-- Alignement du contenu -->
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!-- Alignement du contenu vertical -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        Padding="{TemplateBinding Padding}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <!-- Contenu de l'élément -->
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          Content="{TemplateBinding Content}"/>
                            <StackPanel Orientation="Horizontal" 
                                    HorizontalAlignment="Right" 
                                    VerticalAlignment="Center"
                                    Margin="0,0,0,0">
                            <!-- Icône alignée à droite -->
                                <!--<Image Source="{StaticResource LockedDrawingImage}" 
                                       VerticalAlignment="Center" 
                                       HorizontalAlignment="Right" 
                                       Margin="0,0,0,0" 
                                       Width="16" 
                                       Height="16"/>-->                
                                <Image x:Name="SelectedImage"
                                       Source="{StaticResource RightArrowDrawingImage}"
                                       VerticalAlignment="Center" 
                                       HorizontalAlignment="Right" 
                                       Margin="10,0,0,0"
                                       Width="16" 
                                       Height="16"
                                       Visibility="Collapsed"/>
                            </StackPanel>

                        </Grid>
                    </Border>
                    <!-- Triggers pour changer l'apparence -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource LightGrayBorderBrush}"/>
                            <!-- Gris clair au survol -->
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource WhiteBackgroundBrush}"/>
                            <!-- Blanc à la sélection -->
                            <Setter TargetName="Border" Property="BorderThickness" Value="0,0,0,1"/>
                            <!-- Contour noir à la sélection -->
                            <Setter TargetName="SelectedImage" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="TestedElementListListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Background" Value="{StaticResource OffWhiteBackgroundBrush}"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Margin" Value="0,5,0,0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" Value="5"/>
                <Setter Property="BorderBrush" Value="{StaticResource BlueAccentBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--Style pour les infobulles -->
    <Style x:Key="TooltipImage" TargetType="Image">
        <Setter Property="Source" Value="{StaticResource TooltipWhiteOnKnxGreenDrawingImage}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{StaticResource TooltipKnxGreenOnWhiteDrawingImage}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    
    <Style x:Key="ListBoxLight" TargetType="ListBox">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource DarkGrayBorderBrush}"/>
        <Setter Property="Margin" Value="0,5,0,0"/>
    </Style>
    
    <Style x:Key="ListBoxContainerLight" TargetType="ListBoxItem">
        <!-- Style de base du ListBoxItem -->
        <Setter Property="Background" Value="{StaticResource NoColorBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        
        <!-- Définir le Trigger pour IsMouseOver -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource LightGrayMouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource GrayBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    

    <!-- ______________________________________________________________________________________________________________________________ -->
    
</ResourceDictionary>