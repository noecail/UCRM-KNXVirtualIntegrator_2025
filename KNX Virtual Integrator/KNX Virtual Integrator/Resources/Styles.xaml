<!-- 
    <summary>
    This resource dictionary contains styles for various UI elements such as buttons, titles, and other interface components.

    It centralizes the styling of UI elements to ensure a consistent look and feel across the application.
    Each style is defined with a unique key and can be applied to different controls throughout the application.

-->


<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">


    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Colors.xaml" />
        <ResourceDictionary Source="Images.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- ______________________________BUTTON STYLE________________________________________________________________________________________________________
    BUTTON STYLE 
    -> the main properties are defined in the base button
    
    -BaseButtonStyle:
        The fundamental style for buttons with a solid background, white text, and centered content.
        To customize this style:
        - Background: Change the button's background color using the ButtonGray resource.
        - Foreground: Modify the text color with the TextWhite resource.
        - BorderBrush and BorderThickness: Adjust these properties to change the button's border appearance.
        - FontSize: Set the size of the button text.
        - Padding: Adjust the internal spacing within the button.
        - Height: Set the button's height.

    IconTextButtonStyle:
        A style for buttons that include both an icon and text. It is based on the BaseButtonStyle.
        To customize:
        - Icon: Set the image source using the Tag property.
        - Text: Modify the text content and its appearance.

    IconButtonStyle:
        A style for buttons that display only an icon. It also inherits from BaseButtonStyle.
        To customize:
        - Icon: Set the image source using the Tag property.
        - Height: Adjust the button's height and icon size as needed.

    ConnectButton:
        Style for a connection button, based on IconButtonStyle, that changes appearance based on the connection status.
      - When `IsConnected` is True: Background is ButtonGreen with a connected icon. 
        - Hover/Press: Background changes to AccentuateButtonGreen.
      - When `IsConnected` is False: Background is ButtonRed with a disconnected icon.
        - Hover/Press: Background changes to AccentuatedButtonRed.
    
    Use these styles to ensure consistency across button elements in the application. Modify the parameters to fit your design requirements.

-->
    <!-- Style de base pour le bouton -->
    <Style x:Key="BaseButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource GrayBrush}" />
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource NoColorBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="10,5,10,5"/>
        <Setter Property="Height" Value="35"/>

        <!-- Hauteur du bouton -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        CornerRadius="0">
                        <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Content="{TemplateBinding Content}"
                                      ContentTemplate="{TemplateBinding ContentTemplate}" 
                                      />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style bouton avec icon et texte-->
    <Style x:Key="IconTextButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}"
                        Margin="{TemplateBinding Margin}"
                        CornerRadius="0">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">

                            <!-- Icon -->
                            <Image Source="{TemplateBinding Tag}"
                               VerticalAlignment="Center"
                               HorizontalAlignment="Center"
                               Margin="0,0,5,0"
                               Height="20"
                            />

                            <!-- Text -->
                            <ContentPresenter 
                                          HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                            />

                        </StackPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style bouton avec icon -->
    <Style x:Key="IconButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            Width="{TemplateBinding Height}"
                            Height="{TemplateBinding Height}"
                            CornerRadius="0">
                        <Grid>

                            <!-- Icon -->
                            <Image Source="{TemplateBinding Tag}"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"
                           Height="30"
                           />

                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Style pour le bouton de connexion -->
    <Style TargetType="Button" x:Key="ConnectWindowButton" BasedOn="{StaticResource IconButtonStyle}">
        <Setter Property="Padding" Value="5"/>
        <Style.Triggers>
            <!-- Quand IsConnected est True -->
            <DataTrigger Binding="{Binding IsConnected}" Value="True">
                <Setter Property="Background" Value="{StaticResource KnxGreenBrush}"/>
                <!-- Triggers pour les états de survol et de clic -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="btnBorder" 
                                        Background="{TemplateBinding Background}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Padding="{TemplateBinding Padding}"
                                        CornerRadius="0"
                                        Width="{TemplateBinding Width}"
                                        Height="{TemplateBinding Height}">
                                <Grid>
                                    <Image VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Fill" Source="{StaticResource ConnectedDrawingImage}" />
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource KnxLightGreenBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource KnxLightGreenBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <!-- Quand IsConnected est "False" -->
            <DataTrigger Binding="{Binding IsConnected}" Value="False">
                <Setter Property="Background" Value="{StaticResource RedBrush}"/>
                <!-- Triggers pour les états de survol et de clic -->
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="btnBorder" 
                                    Background="{TemplateBinding Background}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Padding="{TemplateBinding Padding}"
                                    CornerRadius="0"
                                    Width="{TemplateBinding Width}"
                                    Height="{TemplateBinding Height}">
                                <Grid>
                                    <Image Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="UniformToFill" Source="{StaticResource DisconnectedDrawingImage}"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource RedAccentBrush}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource RedAccentBrush}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- Style pour le bouton de suppression de Modèle Fonctionnel -->
    <Style x:Key="DeleteFunctionalModelButtonStyle" TargetType="Button" BasedOn="{StaticResource IconButtonStyle}">
        <Setter Property="Background" Value="{StaticResource NoColorBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Tag" Value="{StaticResource BlackBinDrawingImage}"/>
                <Setter Property="Background" Value="{StaticResource OffWhiteBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource DarkGrayBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Style pour le bouton de suppression de Modèle Fonctionnel -->
    <Style x:Key="DeleteStructureButtonStyle" TargetType="Button" BasedOn="{StaticResource IconButtonStyle}">
        <Setter Property="Background" Value="{StaticResource WhiteBackgroundBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Tag" Value="{StaticResource BlackBinDrawingImage}"/>
                <Setter Property="Background" Value="{StaticResource OffWhiteBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{StaticResource DarkGrayBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Style pour le bouton de suppression d'Élément à Tester-->
    <Style x:Key="DeleteTestedElementButtonStyle" TargetType="Button" BasedOn="{StaticResource DeleteFunctionalModelButtonStyle}">
        <!-- À completer, notamment pour réduire la taille du bouton-->
    </Style>
    <Style x:Key="ListBoxContainerDark" TargetType="ListBoxItem">
        <!-- Style de base du ListBoxItem -->
        <Setter Property="Background" Value="{StaticResource NoColorBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!-- Définir le Trigger pour IsMouseOver -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FFD8E0FF"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#FF729CD5"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Style pour le bouton refresh -->
    <Style x:Key="RefreshButton" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource BlueBrush }"/>
        <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="20" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="btnBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Survol -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background"
                                    Value="{StaticResource BlueAccentBrush}" />
                        </Trigger>
                        <!-- Clic -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background"
                                    Value="{StaticResource BlueAccentMoreBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>    
    
    <Style TargetType="Button" x:Key="CreateStructureButtonStyle" BasedOn="{StaticResource IconTextButtonStyle}">
        <Setter Property="Background" Value="{StaticResource BlueBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="btnBorder"
                            Background="{TemplateBinding Background}"
                            VerticalAlignment="Bottom">
                        
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <Image VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="UniformToFill"
                                   Source="{StaticResource AddDrawingImage}"
                                   Margin="0,5,5,5"
                                   Height="25" Width="25"
                                   />
                            <TextBlock Text="{StaticResource NewStructure}" VerticalAlignment="Center" FontSize="12" Foreground="{StaticResource DarkForegroundBrush}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource BlueAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource BlueAccentMoreBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="Button" x:Key="NewSomethingButtonStyle" BasedOn="{StaticResource IconTextButtonStyle}">
        <Setter Property="Background" Value="{StaticResource BlueBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="btnBorder"
                            Background="{TemplateBinding Background}"
                            VerticalAlignment="Bottom">
                        
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <Image VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="UniformToFill"
                                   Source="{StaticResource AddDrawingImage}"
                                   Margin="0,5,5,5"
                                   Height="25" Width="25" />
                            <TextBlock Text="{TemplateBinding Tag}" VerticalAlignment="Center" FontSize="12" Foreground="{StaticResource DarkForegroundBrush}"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource BlueAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource BlueAccentMoreBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style pour le bouton importation de clés -->
    <Style x:Key="ImportKeysButtonLight" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource LightUncheckedBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource GrayBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="20" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="btnBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Survol -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background"
                                    Value="{StaticResource LightGrayMouseOverBrush}" />
                        </Trigger>
                        <!-- Clic -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background"
                                    Value="{StaticResource LightGrayMouseOverBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ImportKeysButtonDark" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource DarkerGrayBackgroundBrush}" />
        <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource LightGrayBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="20" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="btnBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="0"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Survol -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="btnBorder" Property="Background"
                                    Value="{StaticResource DarkBlueMouseOverBrush}" />
                        </Trigger>
                        <!-- Clic -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="btnBorder" Property="Background" 
                                    Value="{StaticResource SelectedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
        <!-- Style pour le bouton Research -->
        <Style x:Key="ResearchButton" TargetType="Button">
            <Setter Property="Background" Value="{StaticResource GrayBackgroundBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="HorizontalAlignment" Value="Right"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="btnBorder" 
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="0"
                                Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <!-- Survol -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource DarkGrayMouseOverBrush}"/>
                            </Trigger>
                            <!-- Clic -->
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource DarkGrayMouseOverBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style> 
    
        <!-- Style pour le bouton Connexion -->
        <Style x:Key="ConnectButton" TargetType="Button">
            <Setter Property="Background" Value="{StaticResource KnxGreenBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
            <Setter Property="FontSize" Value="12"/>            
            <Setter Property="Height" Value="25"/>
            <Setter Property="Padding" Value="0,0"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="btnBorder" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                CornerRadius="0"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Image Grid.Column="0" Width="15" Height="15" Margin="5,0,5,0" VerticalAlignment="Center">
                                    <Image.Source>
                                        <DrawingImage>
                                          <DrawingImage.Drawing>
                                            <DrawingGroup ClipGeometry="M0,0 V13.86 H14.08 V0 H0 Z">
                                              <DrawingGroup Opacity="1">
                                                <DrawingGroup Opacity="1">
                                                  <DrawingGroup Opacity="1">
                                                    <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M14.08,13.86z M0,0z M8.44,7.14L8.16,7.42 6.72,5.98 6.43,5.7 M5.99,5.25L5.23,4.49C5.16,4.42 5.09,4.39 5.01,4.39 4.93,4.39 4.87,4.41 4.81,4.46L3.7,5.58C3.08,6.17 2.73,6.99 2.73,7.84 2.71,8.48 2.92,9.11 3.3,9.62L3.51,9.9 3.26,10.15 0.1,13.3C0.04,13.37 0,13.44 0,13.51 0,13.59 0.02,13.66 0.07,13.72L0.09,13.72C0.09,13.72 0.12,13.76 0.12,13.76 0.17,13.82 0.25,13.86 0.33,13.86 0.4,13.86 0.47,13.83 0.52,13.78L3.67,10.63 3.91,10.39 4.19,10.59C4.75,10.99 5.41,11.2 6.09,11.2 6.96,11.2 7.77,10.87 8.39,10.27L9.47,9.18C9.54,9.12 9.57,9.04 9.57,8.95 9.58,8.87 9.55,8.8 9.5,8.76L8.61,7.87 5.99,5.25z M8.75,8.95L8.49,9.23 7.94,9.81C7.44,10.3 6.8,10.56 6.11,10.56 5.43,10.56 4.78,10.3 4.29,9.82L4.14,9.67C3.66,9.18 3.39,8.53 3.38,7.84 3.39,7.14 3.66,6.5 4.15,6.03L4.72,5.45 5.01,5.16 5.29,5.45 8.48,8.68 8.75,8.95z" />
                                                    <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M14.08,13.86z M0,0z M13.98,0.56C14.11,0.44,14.12,0.25,14.01,0.13L14.01,0.13C14.01,0.13 13.98,0.0900000000000001 13.98,0.0900000000000001 13.91,0.03 13.84,0 13.76,0 13.68,0 13.61,0.03 13.56,0.08L11,2.64 10.75,2.88 10.48,2.68C9.92,2.26 9.26,2.04 8.56,2.04 7.71,2.04 6.91,2.37 6.31,2.97L5.22,4.05C5.16,4.11 5.12,4.2 5.12,4.28 5.12,4.37 5.14,4.43 5.2,4.48L9.44,8.72C9.51,8.79 9.58,8.83 9.67,8.83 9.74,8.83 9.81,8.8 9.86,8.75L10.98,7.66C11.58,7.07 11.92,6.24 11.91,5.39 11.91,4.76 11.73,4.15 11.39,3.62L11.22,3.35 11.44,3.13 13.98,0.56z M11.26,5.39C11.26,6.06,11,6.7,10.53,7.18L9.95,7.76 9.67,8.05 9.38,7.76 6.17,4.55 5.87,4.26 6.18,3.97 6.76,3.43C7.22,2.94 7.87,2.67 8.56,2.67 9.22,2.67 9.84,2.92 10.31,3.38L10.35,3.42 10.47,3.51 10.5,3.53 10.53,3.56C10.99,4.06,11.25,4.71,11.25,5.38z" />
                                                  </DrawingGroup>
                                                </DrawingGroup>
                                              </DrawingGroup>
                                            </DrawingGroup>
                                          </DrawingImage.Drawing>
                                        </DrawingImage>
                                    </Image.Source>
                                </Image>
                                <TextBlock x:Name="txtblock" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}" Margin="0,0,10,0"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource KnxLightGreenBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource KnxDarkGreenBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <!-- Style pour le bouton Déconnexion -->
        <Style x:Key="DisconnectButton" TargetType="Button">
            <Setter Property="Background" Value="{StaticResource RedBrush}"/>
            <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
            <Setter Property="FontSize" Value="12"/>            
            <Setter Property="Height" Value="25"/>
            <Setter Property="Padding" Value="0,0"/>
            <Setter Property="Margin" Value="0"/>
            <Setter Property="BorderBrush" Value="{StaticResource NoColorBrush}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border x:Name="btnBorder" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                CornerRadius="0"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Image Grid.Column="0" Width="15" Height="15" Margin="5,0,5,0" VerticalAlignment="Center">
                                    <Image.Source>
                                        <DrawingImage>
                                          <DrawingImage.Drawing>
                                            <DrawingGroup ClipGeometry="M0,0 V13.71 H13.71 V0 H0 Z">
                                              <DrawingGroup Opacity="1">
                                                <DrawingGroup Opacity="1">
                                                  <DrawingGroup Opacity="1">
                                                    <DrawingGroup Opacity="1">
                                                      <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M13.71,13.71z M0,0z M8.14,8.19C8.18,8.12 8.2,8.05 8.19,7.97 8.18,7.88 8.13,7.81 8.06,7.75 8.01,7.71 7.94,7.69 7.87,7.69 7.8,7.69 7.74,7.71 7.69,7.74L6.48,8.95 6.2,9.23 4.76,7.79 4.47,7.51 4.76,7.22 5.97,6.01C6.01,5.95 6.03,5.87 6.01,5.79 6,5.71 5.96,5.63 5.89,5.58 5.83,5.54 5.76,5.51 5.69,5.51 5.63,5.51 5.57,5.53 5.52,5.57L4.31,6.77 4.03,7.06 3.27,6.3C3.2,6.23 3.13,6.2 3.05,6.2 2.97,6.2 2.91,6.22 2.85,6.27L1.74,7.39C1.12,7.98 0.769999999999999,8.8 0.769999999999999,9.65 0.749999999999999,10.29 0.959999999999999,10.92 1.34,11.43L1.55,11.71 1.3,11.96 0.1,13.15C0.04,13.22 0,13.29 0,13.36 0,13.44 0.02,13.51 0.07,13.57L0.09,13.57C0.09,13.57 0.12,13.61 0.12,13.61 0.17,13.67 0.25,13.71 0.33,13.71 0.4,13.71 0.47,13.68 0.52,13.63L1.71,12.44 1.95,12.2 2.23,12.4C2.79,12.8 3.45,13.01 4.13,13.01 5,13.01 5.81,12.68 6.43,12.08L7.51,10.99C7.58,10.93 7.61,10.85 7.61,10.76 7.62,10.68 7.59,10.61 7.54,10.57L6.65,9.68 6.93,9.4 8.14,8.19z M6.79,10.76L6.53,11.04 5.98,11.62C5.48,12.11 4.84,12.37 4.15,12.37 3.46,12.37 2.82,12.11 2.33,11.63L2.18,11.48C1.7,10.99 1.43,10.34 1.42,9.65 1.43,8.95 1.7,8.31 2.19,7.84L2.76,7.26 3.05,6.97 3.33,7.26 6.52,10.49 6.79,10.76z" />
                                                      <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M13.71,13.71z M0,0z M13.6,0.56C13.73,0.44,13.74,0.25,13.63,0.13L13.62,0.13C13.62,0.13 13.59,0.0900000000000001 13.59,0.0900000000000001 13.53,0.0300000000000001 13.46,5.55111512312578E-17 13.38,5.55111512312578E-17 13.3,5.55111512312578E-17 13.23,0.0300000000000001 13.18,0.0800000000000001L11.92,1.34 11.67,1.58 11.4,1.38C10.84,0.96 10.17,0.74 9.47,0.74 8.62,0.74 7.81,1.07 7.21,1.67L6.12,2.75C6.06,2.81 6.02,2.9 6.02,2.98 6.02,3.07 6.04,3.13 6.1,3.18L10.36,7.44C10.43,7.51 10.5,7.55 10.59,7.55 10.66,7.55 10.73,7.52 10.78,7.47L11.9,6.38C12.5,5.79 12.84,4.95 12.83,4.1 12.83,3.47 12.65,2.85 12.31,2.32L12.14,2.05 12.36,1.83 13.6,0.559999999999999z M12.18,4.1C12.19,4.77,11.92,5.42,11.45,5.9L10.87,6.48 10.59,6.77 10.3,6.48 7.08,3.26 6.78,2.97 7.09,2.68 7.67,2.14C8.13,1.65 8.78,1.38 9.48,1.38 10.14,1.38 10.77,1.63 11.24,2.09L11.28,2.13 11.4,2.22 11.43,2.24 11.46,2.27C11.92,2.77,12.18,3.42,12.18,4.1z" />
                                                    </DrawingGroup>
                                                  </DrawingGroup>
                                                  <GeometryDrawing Brush="#FFFFFFFF" Geometry="F1 M13.71,13.71z M0,0z M3.91,4.83C3.91,4.65 4.04,4.51 4.21,4.51 4.39,4.51 4.51,4.64 4.51,4.83 4.51,5.02 4.39,5.15 4.21,5.15 4.03,5.15 3.91,5.01 3.91,4.83z M4.04,4.1L3.97,1.65 4.46,1.65 4.39,4.1 4.04,4.1z" />
                                                </DrawingGroup>
                                              </DrawingGroup>
                                            </DrawingGroup>
                                          </DrawingImage.Drawing>
                                        </DrawingImage>
                                    </Image.Source>
                                </Image>
                                <TextBlock x:Name="txtblock" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" Text="{TemplateBinding Content}" Margin="0,0,10,0"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource GrayBorderBrush}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource RedAccentBrush}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="btnBorder" Property="Background" Value="{StaticResource RedAccentBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
    
    
    <!-- ______________________________________________________________________________________________________________________________ -->
    <!-- _____________________________________________________TEXTS___________________________________________________________________ -->
    <Style x:Key="StandardTextBlockLight" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource NoColorBrush}"/>
    </Style>
        
    <Style x:Key="StandardTextBlockDark" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource NoColorBrush}"/>
    </Style>
    
    <Style x:Key="ItalicTextBlockLight" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource NoColorBrush}"/>
    </Style>
        
    <Style x:Key="ItalicTextBlockDark" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontStyle" Value="Italic"/>
        <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource NoColorBrush}"/>
    </Style>
    
    <!-- Style pour les titres -->
    <Style x:Key="TitleTextLight" TargetType="TextBlock" BasedOn="{StaticResource StandardTextBlockLight}">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Padding" Value="5" />
    </Style>
    
    <Style x:Key="TitleTextDark" TargetType="TextBlock" BasedOn="{StaticResource StandardTextBlockDark}">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Padding" Value="5" />
    </Style>
    
    <Style x:Key="StandardTextBoxLight" TargetType="TextBox">
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource WhiteBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource GrayBorderBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource LightGrayMouseOverBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource GrayBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsSelectionActive" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource GrayBorderBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="StandardTextBoxDark" TargetType="TextBox">
        <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource DarkerGrayBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightGrayBorderBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource DarkBlueMouseOverBrush}"/>
                <Setter Property="BorderBrush" Value="{StaticResource LightGrayBorderBrush}"/>
            </Trigger>
            <Trigger Property="IsSelectionActive" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource BlueAccentBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    
    <!-- ______________________________________________________________________________________________________________________________ -->
    <!-- _____________________________________________________OTHER ELEMENTS___________________________________________________________ -->
    <!-- Style pour le listbox de modèles -->
    <Style x:Key="ModelListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Background" Value="{StaticResource OffWhiteBackgroundBrush}"/>
        <!-- Fond par défaut -->
        <Setter Property="BorderBrush" Value="{StaticResource GrayBorderBrush}"/>
        <!-- Couleur du contour -->
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <!-- Contour supérieur et inférieur -->
        <Setter Property="Height" Value="30"/>
        <!-- Hauteur de l'élément -->
        <Setter Property="Margin" Value="0"/>
        <!-- Margin pour le ListBoxItem -->
        <Setter Property="Padding" Value="10,0,10,0"/>
        <!-- Padding pour l'icône -->
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <!-- Alignement du contenu -->
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!-- Alignement du contenu vertical -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        Padding="{TemplateBinding Padding}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid VerticalAlignment="Center">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/> 
                            </Grid.ColumnDefinitions>
                            
                            <!-- CheckBox de suppression -->
                            <CheckBox Grid.Column="0"
                                      x:Name="DeleteStructureCheckBox"
                                      Margin="0,0,5,0">
                            </CheckBox>
                            
                            <!-- Contenu de l'élément -->
                            <ContentPresenter Grid.Column="1"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Content="{TemplateBinding Content}">
                            </ContentPresenter>
                            <!-- Icône de sélection -->
                            <Image Grid.Column="2"
                                   x:Name="SelectedImage"
                                   Source="{StaticResource RightArrowDrawingImage}"
                                   VerticalAlignment="Center" 
                                   HorizontalAlignment="Right" 
                                   Margin="10,0,0,0"
                                   Width="16" 
                                   Height="16"
                                   Visibility="Collapsed"/>
                        </Grid>
                    </Border>
                    <!-- Triggers pour changer l'apparence -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource LightGrayBorderBrush}"/>
                            <!-- Gris clair au survol -->
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource WhiteBackgroundBrush}"/>
                            <!-- Blanc à la sélection -->
                            <Setter TargetName="Border" Property="BorderThickness" Value="0,0,0,1"/>
                            <!-- Contour noir à la sélection -->
                            <Setter TargetName="SelectedImage" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="{StaticResource OffWhiteBackgroundBrush}"/>
                            <!-- Blanc à la sélection -->
                            <Setter TargetName="Border" Property="BorderThickness" Value="0,0,1,1"/>
                            <!-- Contour noir à la sélection -->
                            <Setter TargetName="SelectedImage" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="TestedElementListListBoxItemStyle" TargetType="ListBoxItem">
        <Setter Property="Background" Value="{StaticResource OffWhiteBackgroundBrush}"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Margin" Value="0,5,0,0"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" Value="5"/>
                <Setter Property="BorderBrush" Value="{StaticResource BlueAccentBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- Style pour les infobulles -->
    <Style x:Key="TooltipImage" TargetType="Image">
        <Setter Property="Source" Value="{StaticResource TooltipWhiteOnKnxGreenDrawingImage}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{StaticResource TooltipKnxGreenOnWhiteDrawingImage}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    
    <!-- Style pour les blocs de listes -->
    <Style x:Key="StandardListBoxLight" TargetType="ListBox">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource GrayBorderBrush}"/>
        <Setter Property="Background" Value="{StaticResource WhiteBackgroundBrush}"/>
        <Setter Property="Margin" Value="0,5,0,0"/>
    </Style>
    
    <Style x:Key="StandardListBoxDark" TargetType="ListBox">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{StaticResource LightGrayBorderBrush}"/>
        <Setter Property="Background" Value="{StaticResource DarkerGrayBackgroundBrush}"/>
        <Setter Property="Margin" Value="0,5,0,0"/>
    </Style>
    
    <Style x:Key="ListBoxContainerLight" TargetType="ListBoxItem">
        <!-- Style de base du ListBoxItem -->
        <Setter Property="Background" Value="{StaticResource NoColorBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!-- Définir le Trigger pour IsMouseOver -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource LightGrayMouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource GrayBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!-- ______________________________________________________________________________________________________________________________ -->
    
    
    <!-- Style pour le menu déroulant (ComboBox) -->
    <!-- Style pour la sélection de la liste déroulante-->
    <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="ToggleButton">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Border x:Name="templateRoot"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Grid.RowSpan="2"
                    CornerRadius="2"/>
            <Border x:Name="border" 
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    Grid.Row="0" Grid.RowSpan="2" 
                    CornerRadius="0"/>
            <Path Grid.Row="0" x:Name="Arrow"
                  HorizontalAlignment="Right"
                  Margin="0,0,10,0"
                  VerticalAlignment="Center"
                  Data="M 0 0 L 4 4 L 8 0 Z"
                  Fill="{TemplateBinding Foreground}"/>
        </Grid>
    </ControlTemplate>
    
    <ControlTemplate x:Key="ComboBoxItemTemplate" TargetType="ComboBoxItem">
        <Border x:Name="Border"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}">
            <ContentPresenter />
        </Border>
    </ControlTemplate>
    
    <ControlTemplate x:Key="ComboBoxTemplateLight" TargetType="ComboBox">
        <Grid>
            <ToggleButton Name="ToggleButton"
                          Template="{StaticResource ComboBoxToggleButtonTemplate}"
                          Focusable="False"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          ClickMode="Press"
                          Background="{TemplateBinding Background}"
                          Foreground="{TemplateBinding Foreground}">
            </ToggleButton>
            <ContentPresenter Name="ContentSite"
                              IsHitTestVisible="False"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Margin="7,3,23,3"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Left" />
            <Popup Name="Popup"
                   Placement="Bottom"
                   IsOpen="{TemplateBinding IsDropDownOpen}"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Slide">
                <Grid Name="DropDown"
                      SnapsToDevicePixels="True"
                      MinWidth="{TemplateBinding ActualWidth}"
                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="DropDownBorder"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}" />
                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                    </ScrollViewer>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers >
            <Trigger Property="HasDropShadow" SourceName="Popup" Value="True">
                <Setter Property="Margin" TargetName="DropDown" Value="0,0,5,5" />
                <Setter Property="SnapsToDevicePixels" TargetName="DropDown" Value="True" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="ToggleButton"
                        Value="{StaticResource LightGrayMouseOverBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource LightGrayMouseOverBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="LightComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Background" Value="{StaticResource WhiteBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxItemTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource LightGrayMouseOverBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource LightGrayMouseOverBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="LightComboBoxStyle" TargetType="ComboBox">
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource WhiteBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource GrayBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/> <!-- Adjust border thickness here -->
        <Setter Property="Padding" Value="5,3"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource LightComboBoxItemStyle}"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplateLight}"/>
    </Style>
    
    <ControlTemplate x:Key="ComboBoxTemplateDark" TargetType="ComboBox">
        <Grid>
            <ToggleButton Name="ToggleButton"
                          Template="{StaticResource ComboBoxToggleButtonTemplate}"
                          Focusable="False"
                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          ClickMode="Press"
                          Background="{TemplateBinding Background}"
                          Foreground="{TemplateBinding Foreground}">
            </ToggleButton>
            <ContentPresenter Name="ContentSite"
                              IsHitTestVisible="False"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Margin="7,3,23,3"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Left" />
            <Popup Name="Popup"
                   Placement="Bottom"
                   IsOpen="{TemplateBinding IsDropDownOpen}"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Slide">
                <Grid Name="DropDown"
                      SnapsToDevicePixels="True"
                      MinWidth="{TemplateBinding ActualWidth}"
                      MaxHeight="{TemplateBinding MaxDropDownHeight}">
                    <Border x:Name="DropDownBorder"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}" />
                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                    </ScrollViewer>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" SourceName="Popup" Value="True">
                <Setter Property="Margin" TargetName="DropDown" Value="0,0,5,5"/>
                <Setter Property="SnapsToDevicePixels" TargetName="DropDown" Value="True"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="ToggleButton" Value="{StaticResource DarkBlueMouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource LightGrayForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="DarkComboBoxItemStyle" TargetType="ComboBoxItem">
        <Setter Property="Background" Value="{StaticResource DarkerGrayBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxItemTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource DarkBlueMouseOverBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{StaticResource BlueAccentMoreBrush}"/>
                <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="DarkComboBoxStyle" TargetType="ComboBox">
        <Setter Property="Foreground" Value="{StaticResource DarkForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource DarkerGrayBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource GrayBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/> <!-- Adjust border thickness here -->
        <Setter Property="Padding" Value="5,3"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource DarkComboBoxItemStyle}"/>
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplateDark}"/>
    </Style>
    
    <!-- ________________________________________ CheckBox __________________________________________________________________ -->

    <ControlTemplate x:Key="CheckBoxTemplate" TargetType="CheckBox">
        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
            <Grid Width="15" Height="15" VerticalAlignment="Center" Margin="0,0,5,0">
                <Border x:Name="Border"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}">
                    <Path x:Name="CheckMark"
                          Data="M 0 0.5 L 0.2 0.8 L 0.7 0.2"
                          Stretch="Uniform"
                          Margin="2"
                          Stroke="{TemplateBinding Foreground  }"
                          StrokeThickness="2" />
                </Border>
            </Grid>
            <ContentPresenter VerticalAlignment="Center" />
        </StackPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="StandardCheckBoxLight" TargetType="CheckBox">
        <Setter Property="Background" Value="{StaticResource WhiteBackgroundBrush}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource LightForegroundBrush}"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="{StaticResource GrayBorderBrush}"></Setter>
        <Setter Property="Template" Value="{StaticResource CheckBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter  Property="Background"
                        Value="{StaticResource OffWhiteBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter  Property="Background"
                        Value="{StaticResource WhiteBackgroundBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        Value="{StaticResource LightGrayMouseOverBrush}" />
            </MultiTrigger>
            <!-- MultiTrigger for mouse over when unchecked -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        Value="{StaticResource LightGrayMouseOverBrush}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="StandardCheckBoxDark" TargetType="CheckBox">
        <Setter Property="Background" Value="{StaticResource DarkUncheckedBackgroundBrush}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource DarkCheckMarkBrush}"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="BorderBrush" Value="{StaticResource LightGrayBorderBrush}"></Setter>
        <Setter Property="Template" Value="{StaticResource CheckBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter  Property="Background"
                         Value="{StaticResource DarkCheckedBackgroundBrush}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter  Property="Background"
                         Value="{StaticResource DarkUncheckedBackgroundBrush}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        Value="{StaticResource DarkBlueMouseOverBrush}" />
            </MultiTrigger>
            <!-- MultiTrigger for mouse over when unchecked -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False" />
                    <Condition Property="IsMouseOver" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background"
                        Value="{StaticResource DarkGrayMouseOverBrush}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    
    
</ResourceDictionary>